; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define <8 x i8> @icmp_eq_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_eq_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmeq v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_eq_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_eq_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_eq_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_eq_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmeq v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_eq_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_eq_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_eq_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_eq_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmeq v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_eq_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_eq_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_eq_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_eq_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmeq v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_eq_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_eq_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_eq_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_eq_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmeq v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_eq_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_eq_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_eq_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_eq_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmeq v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_eq_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_eq_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_eq_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_eq_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,0,3,2]
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v2i64+0x21>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmeq v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_eq_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_eq_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,0,3,2]
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_eq_v2i64_0+0x25>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmeq v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp eq <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_ne_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_ne_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmeq v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    bic v0.8b, v2.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_ne_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_ne_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    bic v0.8b, v1.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_ne_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_ne_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmeq v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    bic v0.16b, v2.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_ne_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_ne_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    bic v0.16b, v1.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_ne_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_ne_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v4i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmeq v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    bic v0.8b, v2.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_ne_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_ne_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v4i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    bic v0.8b, v1.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_ne_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_ne_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v8i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmeq v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    bic v0.16b, v2.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_ne_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_ne_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v8i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    bic v0.16b, v1.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_ne_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_ne_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v2i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmeq v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    bic v0.8b, v2.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_ne_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_ne_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v2i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmeq v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    bic v0.8b, v1.8b, v0.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_ne_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_ne_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v4i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmeq v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    bic v0.16b, v2.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_ne_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_ne_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v4i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmeq v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    bic v0.16b, v1.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_ne_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_ne_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,0,3,2]
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v2i64+0x21>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmeq v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    bic v0.16b, v1.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_ne_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_ne_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,0,3,2]
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ne_v2i64_0+0x25>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmeq v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    bic v0.16b, v1.16b, v0.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ne <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_ugt_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_ugt_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ugt_v8i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmhi v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_ugt_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_ugt_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ugt_v8i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_ugt_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_ugt_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ugt_v16i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmhi v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_ugt_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_ugt_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ugt_v16i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_ugt_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_ugt_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ugt_v4i16+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmhi v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_ugt_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_ugt_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ugt_v4i16_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm2
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_ugt_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_ugt_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ugt_v8i16+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmhi v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_ugt_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_ugt_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ugt_v8i16_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm2
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_ugt_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_ugt_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ugt_v2i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmhi v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_ugt_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_ugt_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ugt_v2i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm2
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_ugt_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_ugt_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ugt_v4i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmhi v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_ugt_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_ugt_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ugt_v4i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm2
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_ugt_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_ugt_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ugt_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    movdqa xmm2, xmm0
; X64-NEXT:    pcmpgtd xmm2, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ugt_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmhi v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_ugt_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_ugt_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ugt_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    movdqa xmm1, xmm0
; X64-NEXT:    pcmpgtd xmm1, xmm2
; X64-NEXT:    pcmpeqd xmm0, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ugt_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmhi v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ugt <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_uge_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_uge_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_uge_v8i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmhs v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_uge_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_uge_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_uge_v8i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_uge_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_uge_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_uge_v16i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmhs v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_uge_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_uge_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_uge_v16i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_uge_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_uge_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    psubusw xmm1, xmm0
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmhs v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_uge_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_uge_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    psubusw xmm1, xmm0
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_uge_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_uge_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    psubusw xmm1, xmm0
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmhs v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_uge_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_uge_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    psubusw xmm1, xmm0
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_uge_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_uge_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_uge_v2i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pandn xmm2, xmmword ptr <icmp_uge_v2i32+0x28>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmhs v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_uge_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_uge_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_uge_v2i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_uge_v2i32_0+0x2c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_uge_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_uge_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_uge_v4i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pandn xmm2, xmmword ptr <icmp_uge_v4i32+0x28>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmhs v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_uge_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_uge_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_uge_v4i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_uge_v4i32_0+0x2c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_uge_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_uge_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_uge_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pcmpeqd xmm1, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_uge_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmhs v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_uge_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_uge_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_uge_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pcmpeqd xmm2, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_uge_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmhs v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp uge <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_ult_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_ult_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ult_v8i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmhi v1.8b, v1.8b, v0.8b
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_ult_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_ult_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ult_v8i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v2.8b, v2.8b, v0.8b
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_ult_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_ult_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ult_v16i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmhi v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_ult_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_ult_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pmaxub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ult_v16i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v2.16b, v2.16b, v0.16b
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_ult_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_ult_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ult_v4i16+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtw xmm2, xmm0
; X64-NEXT:    psrlw xmm2, 0xf
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmhi v1.4h, v1.4h, v0.4h
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_ult_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_ult_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ult_v4i16_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v2.4h, v2.4h, v0.4h
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_ult_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_ult_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ult_v8i16+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtw xmm2, xmm0
; X64-NEXT:    psrlw xmm2, 0xf
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmhi v1.8h, v1.8h, v0.8h
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_ult_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_ult_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ult_v8i16_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v2.8h, v2.8h, v0.8h
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_ult_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_ult_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ult_v2i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    psrld xmm2, 0x1f
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmhi v1.2s, v1.2s, v0.2s
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_ult_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_ult_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ult_v2i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhi v2.2s, v2.2s, v0.2s
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_ult_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_ult_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ult_v4i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    psrld xmm2, 0x1f
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmhi v1.4s, v1.4s, v0.4s
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_ult_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_ult_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ult_v4i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhi v2.4s, v2.4s, v0.4s
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_ult_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_ult_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ult_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pcmpeqd xmm1, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ult_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmhi v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_ult_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_ult_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ult_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pcmpeqd xmm2, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ult_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmhi v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ult <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_ule_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_ule_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ule_v8i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmhs v1.8b, v1.8b, v0.8b
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_ule_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_ule_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ule_v8i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v2.8b, v2.8b, v0.8b
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_ule_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_ule_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ule_v16i8+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmhs v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_ule_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_ule_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pminub xmm1, xmm0
; X64-NEXT:    pcmpeqb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_ule_v16i8_0+0x20>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v2.16b, v2.16b, v0.16b
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_ule_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_ule_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    psubusw xmm0, xmm1
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmhs v1.4h, v1.4h, v0.4h
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_ule_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_ule_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    psubusw xmm0, xmm1
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v2.4h, v2.4h, v0.4h
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_ule_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_ule_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    psubusw xmm0, xmm1
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmhs v1.8h, v1.8h, v0.8h
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_ule_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_ule_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    psubusw xmm0, xmm1
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpeqw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v2.8h, v2.8h, v0.8h
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_ule_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_ule_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ule_v2i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v2i32+0x28>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmhs v1.2s, v1.2s, v0.2s
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_ule_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_ule_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ule_v2i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v2i32_0+0x2c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmhs v2.2s, v2.2s, v0.2s
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_ule_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_ule_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ule_v4i32+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v4i32+0x28>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmhs v1.4s, v1.4s, v0.4s
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_ule_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_ule_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ule_v4i32_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v4i32_0+0x2c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmhs v2.4s, v2.4s, v0.4s
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_ule_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_ule_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_ule_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    movdqa xmm2, xmm0
; X64-NEXT:    pcmpgtd xmm2, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmhs v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_ule_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_ule_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_ule_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    movdqa xmm1, xmm0
; X64-NEXT:    pcmpgtd xmm1, xmm2
; X64-NEXT:    pcmpeqd xmm0, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_ule_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmhs v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp ule <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_sgt_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_sgt_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmgt v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_sgt_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_sgt_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_sgt_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_sgt_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmgt v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_sgt_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_sgt_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_sgt_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_sgt_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmgt v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_sgt_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_sgt_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_sgt_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_sgt_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmgt v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_sgt_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_sgt_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0xf
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_sgt_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_sgt_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmgt v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_sgt_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_sgt_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_sgt_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_sgt_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmgt v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_sgt_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_sgt_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    psrld xmm0, 0x1f
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_sgt_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_sgt_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_sgt_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    movdqa xmm2, xmm0
; X64-NEXT:    pcmpgtd xmm2, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmgt v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_sgt_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_sgt_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_sgt_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    movdqa xmm1, xmm0
; X64-NEXT:    pcmpgtd xmm1, xmm2
; X64-NEXT:    pcmpeqd xmm0, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_sgt_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmgt v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sgt <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_sge_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_sge_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmge v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_sge_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_sge_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_sge_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_sge_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmge v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_sge_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_sge_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_sge_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_sge_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v4i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmge v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_sge_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_sge_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v4i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v0.4h, v0.4h, v2.4h
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_sge_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_sge_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v8i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmge v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_sge_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_sge_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v8i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v0.8h, v0.8h, v2.8h
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_sge_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_sge_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v2i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmge v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v2.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_sge_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_sge_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v2i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v0.2s, v0.2s, v2.2s
; ARM64-NEXT:    and v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_sge_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_sge_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v4i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmge v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_sge_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_sge_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pandn xmm1, xmmword ptr <icmp_sge_v4i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v0.4s, v0.4s, v2.4s
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_sge_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_sge_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_sge_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pcmpeqd xmm1, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sge_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmge v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_sge_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_sge_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_sge_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pcmpeqd xmm2, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sge_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmge v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    dup v1.2d, x0
; ARM64-NEXT:    and v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sge <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_slt_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_slt_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pand xmm1, xmmword ptr <icmp_slt_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmgt v1.8b, v1.8b, v0.8b
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_slt_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_slt_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pand xmm1, xmmword ptr <icmp_slt_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v2.8b, v2.8b, v0.8b
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_slt_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_slt_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pand xmm1, xmmword ptr <icmp_slt_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmgt v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_slt_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_slt_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm1, xmm0
; X64-NEXT:    pand xmm1, xmmword ptr <icmp_slt_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v2.16b, v2.16b, v0.16b
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_slt_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_slt_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmgt v1.4h, v1.4h, v0.4h
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_slt_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_slt_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v2.4h, v2.4h, v0.4h
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_slt_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_slt_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmgt v1.8h, v1.8h, v0.8h
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_slt_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_slt_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm1, xmm0
; X64-NEXT:    psrlw xmm1, 0xf
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v2.8h, v2.8h, v0.8h
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_slt_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_slt_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmgt v1.2s, v1.2s, v0.2s
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_slt_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_slt_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmgt v2.2s, v2.2s, v0.2s
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_slt_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_slt_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmgt v1.4s, v1.4s, v0.4s
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_slt_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_slt_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    psrld xmm1, 0x1f
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmgt v2.4s, v2.4s, v0.4s
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_slt_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_slt_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_slt_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pcmpgtd xmm2, xmm0
; X64-NEXT:    pcmpeqd xmm1, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_slt_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmgt v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_slt_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_slt_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_slt_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pcmpgtd xmm1, xmm0
; X64-NEXT:    pcmpeqd xmm2, xmm0
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pand xmm0, xmmword ptr <icmp_slt_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmgt v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <8 x i8> @icmp_sle_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <icmp_sle_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v8i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8b, #0x1
; ARM64-NEXT:    cmge v1.8b, v1.8b, v0.8b
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <8 x i8> %a, %b
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <8 x i8> @icmp_sle_v8i8_0(<8 x i8> %a) {
; X64-LABEL: <icmp_sle_v8i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v8i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v8i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v2.8b, v2.8b, v0.8b
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <8 x i8> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i8>
  ret <8 x i8> %x
}

define <16 x i8> @icmp_sle_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <icmp_sle_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v16i8+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.16b, #0x1
; ARM64-NEXT:    cmge v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <16 x i8> %a, %b
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <16 x i8> @icmp_sle_v16i8_0(<16 x i8> %a) {
; X64-LABEL: <icmp_sle_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtb xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v16i8_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v2.16b, v2.16b, v0.16b
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <16 x i8> %a, zeroinitializer
  %x = zext <16 x i1> %r to <16 x i8>
  ret <16 x i8> %x
}

define <4 x i16> @icmp_sle_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <icmp_sle_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v4i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4h, #0x1
; ARM64-NEXT:    cmge v1.4h, v1.4h, v0.4h
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <4 x i16> %a, %b
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <4 x i16> @icmp_sle_v4i16_0(<4 x i16> %a) {
; X64-LABEL: <icmp_sle_v4i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v4i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v4i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v2.4h, v2.4h, v0.4h
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <4 x i16> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i16>
  ret <4 x i16> %x
}

define <8 x i16> @icmp_sle_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <icmp_sle_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v8i16+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.8h, #0x1
; ARM64-NEXT:    cmge v1.8h, v1.8h, v0.8h
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <8 x i16> %a, %b
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <8 x i16> @icmp_sle_v8i16_0(<8 x i16> %a) {
; X64-LABEL: <icmp_sle_v8i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v8i16_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v8i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v2.8h, v2.8h, v0.8h
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <8 x i16> %a, zeroinitializer
  %x = zext <8 x i1> %r to <8 x i16>
  ret <8 x i16> %x
}

define <2 x i32> @icmp_sle_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <icmp_sle_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v2i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.2s, #0x1
; ARM64-NEXT:    cmge v1.2s, v1.2s, v0.2s
; ARM64-NEXT:    and v1.8b, v1.8b, v2.8b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <2 x i32> %a, %b
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <2 x i32> @icmp_sle_v2i32_0(<2 x i32> %a) {
; X64-LABEL: <icmp_sle_v2i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v2i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v2i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x1
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    cmge v2.2s, v2.2s, v0.2s
; ARM64-NEXT:    and v2.8b, v2.8b, v1.8b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <2 x i32> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i32>
  ret <2 x i32> %x
}

define <4 x i32> @icmp_sle_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <icmp_sle_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v4i32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v2.4s, #0x1
; ARM64-NEXT:    cmge v1.4s, v1.4s, v0.4s
; ARM64-NEXT:    and v1.16b, v1.16b, v2.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <4 x i32> %a, %b
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <4 x i32> @icmp_sle_v4i32_0(<4 x i32> %a) {
; X64-LABEL: <icmp_sle_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    pcmpgtd xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v4i32_0+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x1
; ARM64-NEXT:    movi v2.16b, #0x0
; ARM64-NEXT:    cmge v2.4s, v2.4s, v0.4s
; ARM64-NEXT:    and v2.16b, v2.16b, v1.16b
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <4 x i32> %a, zeroinitializer
  %x = zext <4 x i1> %r to <4 x i32>
  ret <4 x i32> %x
}

define <2 x i64> @icmp_sle_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <icmp_sle_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm2, xmmword ptr <icmp_sle_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm1, xmm2
; X64-NEXT:    pxor xmm0, xmm2
; X64-NEXT:    movdqa xmm2, xmm0
; X64-NEXT:    pcmpgtd xmm2, xmm1
; X64-NEXT:    pcmpeqd xmm0, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm1, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v2i64+0x42>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    cmge v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <2 x i64> %a, %b
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}

define <2 x i64> @icmp_sle_v2i64_0(<2 x i64> %a) {
; X64-LABEL: <icmp_sle_v2i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movdqa xmm1, xmmword ptr <icmp_sle_v2i64_0+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm2, xmm1
; X64-NEXT:    pxor xmm0, xmm1
; X64-NEXT:    movdqa xmm1, xmm0
; X64-NEXT:    pcmpgtd xmm1, xmm2
; X64-NEXT:    pcmpeqd xmm0, xmm2
; X64-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[1,1,3,3]
; X64-NEXT:    pand xmm2, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    pandn xmm0, xmmword ptr <icmp_sle_v2i64_0+0x46>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_v2i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x1 // =1
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    cmge v1.2d, v1.2d, v0.2d
; ARM64-NEXT:    dup v0.2d, x0
; ARM64-NEXT:    and v1.16b, v1.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp sle <2 x i64> %a, zeroinitializer
  %x = zext <2 x i1> %r to <2 x i64>
  ret <2 x i64> %x
}
