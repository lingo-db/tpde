; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

@glob = internal global i32 5, align 4

define void @store_glob(ptr %ptr) {
; X64-LABEL: <store_glob>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <store_glob+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_glob>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store ptr @glob, ptr %ptr
  ret void
}

define void @store_glob_ptrtoint(ptr %ptr) {
; X64-LABEL: <store_glob_ptrtoint>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <store_glob_ptrtoint+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_glob_ptrtoint>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store i64 ptrtoint (ptr @glob to i64), ptr %ptr
  ret void
}

define void @store_glob_ptrtoint_trunc_add(ptr %ptr) {
; X64-LABEL: <store_glob_ptrtoint_trunc_add>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <store_glob_ptrtoint_trunc_add+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_glob_ptrtoint_trunc_add>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w1, w1, #0x20
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store i32 add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32), ptr %ptr
  ret void
}

define void @store_struct1(ptr %ptr) {
; X64-LABEL: <store_struct1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov dword ptr [rdi], 0x0
; X64-NEXT:    mov dword ptr [rdi + 0x4], 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_struct1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    str w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store {i32, i32} {i32 0, i32 1}, ptr %ptr
  ret void
}

define void @store_struct2(ptr %ptr) {
; X64-LABEL: <store_struct2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov dword ptr [rdi], 0x0
; X64-NEXT:    lea rax, <store_struct2+0x19>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_struct2>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store {i32, ptr} {i32 0, ptr @glob}, ptr %ptr
  ret void
}

define void @store_struct3(ptr %ptr) {
; X64-LABEL: <store_struct3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <store_struct3+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov dword ptr [rdi], ecx
; X64-NEXT:    mov dword ptr [rdi + 0x4], eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_struct3>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w1, w1, #0x20
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    str w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store {i32, i32} {i32 0, i32 add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32)}, ptr %ptr
  ret void
}

define void @vector_constantexpr(ptr %ptr) {
; X64-LABEL: <vector_constantexpr>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <vector_constantexpr+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea rcx, <vector_constantexpr+0x1a>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea ecx, [rcx + 0x20]
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x30], eax
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x30]
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x2c], ecx
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x30]
; X64-NEXT:    movsd qword ptr [rdi], xmm0
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <vector_constantexpr>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    adrp x2, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x2, x2, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w2, w2, #0x20
; ARM64-NEXT:    movi v0.8b, #0x0
; ARM64-NEXT:    mov v0.s[0], w1
; ARM64-NEXT:    mov v0.s[1], w2
; ARM64-NEXT:    str d0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store <2 x i32> <i32 ptrtoint (ptr @glob to i32), i32 add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32)>, ptr %ptr
  ret void
}

define void @vector_ptrs(ptr %ptr) {
; X64-LABEL: <vector_ptrs>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x28]
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    lea rcx, <vector_ptrs+0x29>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rbp - 0x50], rcx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov qword ptr [rbp - 0x48], 0x0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm1
; X64-NEXT:    mov qword ptr [rbp - 0x40], 0x0
; X64-NEXT:    movapd xmm1, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm1
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm0
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <vector_ptrs>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x1, x1, #0x28
; ARM64-NEXT:    movi v0.16b, #0x0
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    adrp x2, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x2, x2, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov v0.d[0], x2
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    mov v0.d[1], x3
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    mov v1.d[0], x3
; ARM64-NEXT:    mov v1.d[1], x1
; ARM64-NEXT:    str q0, [x0]
; ARM64-NEXT:    str q1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store <4 x ptr> <ptr @glob, ptr null, ptr poison, ptr getelementptr inbounds (i8, ptr null, i64 40)>, ptr %ptr
  ret void
}

define void @store_array1(ptr %ptr) {
; X64-LABEL: <store_array1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, <store_array1+0x13>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], 0x0
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_array1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    str x2, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store [2 x ptr] [ ptr @glob, ptr null ], ptr %ptr
  ret void
}

define void @store_array2(ptr %ptr) {
; X64-LABEL: <store_array2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov qword ptr [rdi], 0xbc614e
; X64-NEXT:    movabs rax, 0x44e6af645f07c
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store_array2>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x614e // =24910
; ARM64-NEXT:    movk x1, #0xbc, lsl #16
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    mov x1, #0xf07c // =61564
; ARM64-NEXT:    movk x1, #0xf645, lsl #16
; ARM64-NEXT:    movk x1, #0x4e6a, lsl #32
; ARM64-NEXT:    movk x1, #0x4, lsl #48
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  store [2 x i64] [ i64 12345678, i64 1212121212121212 ], ptr %ptr
  ret void
}

define void @phi_const_float(ptr %ptr) {
; X64-LABEL: <phi_const_float>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov eax, 0x42000000
; X64-NEXT:    movd xmm0, eax
; X64-NEXT:    movd dword ptr [rbp - 0x2c], xmm0
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x41800000
; X64-NEXT:    movd xmm0, eax
; X64-NEXT:    movd dword ptr [rbp - 0x2c], xmm0
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    movd xmm0, dword ptr [rbp - 0x2c]
; X64-NEXT:    movss dword ptr [rbx], xmm0
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_const_float>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    str d8, [sp, #0x18]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x16, #0x42000000 // =1107296256
; ARM64-NEXT:    fmov s0, w16
; ARM64-NEXT:    mov v8.16b, v0.16b
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.eq 0x3d8 <phi_const_float+0x48>
; ARM64-NEXT:    fmov s0, #16.00000000
; ARM64-NEXT:    mov v8.16b, v0.16b
; ARM64-NEXT:    b 0x3c0 <phi_const_float+0x30>
; ARM64-NEXT:    str s8, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    ldr d8, [sp, #0x18]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi float [ 32.0, %entry ], [ 16.0, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store float %phi, ptr %ptr
  ret void
}

define void @phi_const_float_regpressure(ptr %ptr) {
; X64-LABEL: <phi_const_float_regpressure>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov r13d, eax
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov r14d, eax
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov r15d, eax
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    movzx ecx, byte ptr [rbx]
; X64-NEXT:    movzx edx, byte ptr [rbx]
; X64-NEXT:    movzx esi, byte ptr [rbx]
; X64-NEXT:    movzx edi, byte ptr [rbx]
; X64-NEXT:    movzx r8d, byte ptr [rbx]
; X64-NEXT:    movzx r9d, byte ptr [rbx]
; X64-NEXT:    movzx r10d, byte ptr [rbx]
; X64-NEXT:    movzx r11d, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x29], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2a], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2b], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2c], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2d], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2e], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x2f], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x30], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x31], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x32], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x33], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x34], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x35], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x36], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x37], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x38], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x39], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x3a], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x3b], al
; X64-NEXT:    movzx eax, byte ptr [rbx]
; X64-NEXT:    mov byte ptr [rbp - 0x3c], al
; X64-NEXT:    mov byte ptr [rbp - 0x3d], cl
; X64-NEXT:    mov byte ptr [rbp - 0x3e], dl
; X64-NEXT:    mov byte ptr [rbp - 0x3f], sil
; X64-NEXT:    mov byte ptr [rbp - 0x40], dil
; X64-NEXT:    mov byte ptr [rbp - 0x41], r8b
; X64-NEXT:    mov byte ptr [rbp - 0x42], r9b
; X64-NEXT:    mov byte ptr [rbp - 0x43], r10b
; X64-NEXT:    mov byte ptr [rbp - 0x44], r11b
; X64-NEXT:    movss xmm0, dword ptr <phi_const_float_regpressure+0xe0>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movd dword ptr [rbp - 0x48], xmm0
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x41800000
; X64-NEXT:    movd xmm0, eax
; X64-NEXT:    movd dword ptr [rbp - 0x48], xmm0
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov byte ptr [rbx], r12b
; X64-NEXT:    mov byte ptr [rbx], r13b
; X64-NEXT:    mov byte ptr [rbx], r14b
; X64-NEXT:    mov byte ptr [rbx], r15b
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x29]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3d]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3e]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3f]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x40]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x41]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x42]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x43]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x44]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2a]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2b]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2c]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2d]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2e]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2f]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x30]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x31]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x32]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x33]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x34]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x35]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x36]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x37]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x38]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x39]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3a]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3b]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3c]
; X64-NEXT:    mov byte ptr [rbx], al
; X64-NEXT:    movd xmm0, dword ptr [rbp - 0x48]
; X64-NEXT:    movss dword ptr [rbx], xmm0
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop r15
; X64-NEXT:    pop r14
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_const_float_regpressure>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    stp x27, x28, [sp, #0x50]
; ARM64-NEXT:    str d8, [sp, #0x60]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    mov w21, w0
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    mov w22, w0
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    mov w23, w0
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    ldrb w1, [x19]
; ARM64-NEXT:    ldrb w2, [x19]
; ARM64-NEXT:    ldrb w3, [x19]
; ARM64-NEXT:    ldrb w4, [x19]
; ARM64-NEXT:    ldrb w5, [x19]
; ARM64-NEXT:    ldrb w6, [x19]
; ARM64-NEXT:    ldrb w7, [x19]
; ARM64-NEXT:    ldrb w8, [x19]
; ARM64-NEXT:    ldrb w9, [x19]
; ARM64-NEXT:    ldrb w10, [x19]
; ARM64-NEXT:    ldrb w11, [x19]
; ARM64-NEXT:    ldrb w12, [x19]
; ARM64-NEXT:    ldrb w13, [x19]
; ARM64-NEXT:    ldrb w14, [x19]
; ARM64-NEXT:    ldrb w15, [x19]
; ARM64-NEXT:    ldrb w18, [x19]
; ARM64-NEXT:    ldrb w24, [x19]
; ARM64-NEXT:    ldrb w25, [x19]
; ARM64-NEXT:    ldrb w26, [x19]
; ARM64-NEXT:    ldrb w27, [x19]
; ARM64-NEXT:    ldrb w28, [x19]
; ARM64-NEXT:    ldrb w30, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa0]
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa3]
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    ldrb w0, [x19]
; ARM64-NEXT:    strb w0, [x29, #0xa5]
; ARM64-NEXT:    strb w1, [x29, #0xa6]
; ARM64-NEXT:    strb w2, [x29, #0xa7]
; ARM64-NEXT:    strb w3, [x29, #0xa8]
; ARM64-NEXT:    strb w4, [x29, #0xa9]
; ARM64-NEXT:    strb w5, [x29, #0xaa]
; ARM64-NEXT:    strb w6, [x29, #0xab]
; ARM64-NEXT:    strb w7, [x29, #0xac]
; ARM64-NEXT:    strb w8, [x29, #0xad]
; ARM64-NEXT:    strb w9, [x29, #0xae]
; ARM64-NEXT:    strb w10, [x29, #0xaf]
; ARM64-NEXT:    strb w11, [x29, #0xb0]
; ARM64-NEXT:    strb w12, [x29, #0xb1]
; ARM64-NEXT:    strb w13, [x29, #0xb2]
; ARM64-NEXT:    strb w14, [x29, #0xb3]
; ARM64-NEXT:    strb w15, [x29, #0xb4]
; ARM64-NEXT:    strb w18, [x29, #0xb5]
; ARM64-NEXT:    strb w24, [x29, #0xb6]
; ARM64-NEXT:    strb w25, [x29, #0xb7]
; ARM64-NEXT:    strb w26, [x29, #0xb8]
; ARM64-NEXT:    strb w27, [x29, #0xb9]
; ARM64-NEXT:    strb w28, [x29, #0xba]
; ARM64-NEXT:    strb w30, [x29, #0xbb]
; ARM64-NEXT:    mov x16, #0x42000000 // =1107296256
; ARM64-NEXT:    fmov s0, w16
; ARM64-NEXT:    mov v8.16b, v0.16b
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.eq 0x548 <phi_const_float_regpressure+0x158>
; ARM64-NEXT:    fmov s0, #16.00000000
; ARM64-NEXT:    mov v8.16b, v0.16b
; ARM64-NEXT:    b 0x530 <phi_const_float_regpressure+0x140>
; ARM64-NEXT:    strb w20, [x19]
; ARM64-NEXT:    strb w21, [x19]
; ARM64-NEXT:    strb w22, [x19]
; ARM64-NEXT:    strb w23, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa0]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa6]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa7]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa8]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa9]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xaa]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xab]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xac]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xad]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xae]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xaf]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb0]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb1]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb2]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb3]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb4]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb5]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb6]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb7]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb8]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xb9]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xba]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xbb]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa1]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa2]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa3]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa4]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    ldrb w0, [x29, #0xa5]
; ARM64-NEXT:    strb w0, [x19]
; ARM64-NEXT:    str s8, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    ldp x21, x22, [sp, #0x20]
; ARM64-NEXT:    ldp x23, x24, [sp, #0x30]
; ARM64-NEXT:    ldp x25, x26, [sp, #0x40]
; ARM64-NEXT:    ldp x27, x28, [sp, #0x50]
; ARM64-NEXT:    ldr d8, [sp, #0x60]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
entry:
  %l1 = load i8, ptr %ptr
  %l2 = load i8, ptr %ptr
  %l3 = load i8, ptr %ptr
  %l4 = load i8, ptr %ptr
  %l5 = load i8, ptr %ptr
  %l6 = load i8, ptr %ptr
  %l7 = load i8, ptr %ptr
  %l8 = load i8, ptr %ptr
  %l9 = load i8, ptr %ptr
  %l10 = load i8, ptr %ptr
  %l11 = load i8, ptr %ptr
  %l12 = load i8, ptr %ptr
  %l13 = load i8, ptr %ptr
  %l14 = load i8, ptr %ptr
  %l15 = load i8, ptr %ptr
  %l16 = load i8, ptr %ptr
  %l17 = load i8, ptr %ptr
  %l18 = load i8, ptr %ptr
  %l19 = load i8, ptr %ptr
  %l20 = load i8, ptr %ptr
  %l21 = load i8, ptr %ptr
  %l22 = load i8, ptr %ptr
  %l23 = load i8, ptr %ptr
  %l24 = load i8, ptr %ptr
  %l25 = load i8, ptr %ptr
  %l26 = load i8, ptr %ptr
  %l27 = load i8, ptr %ptr
  %l28 = load i8, ptr %ptr
  %l29 = load i8, ptr %ptr
  %l30 = load i8, ptr %ptr
  %l31 = load i8, ptr %ptr
  %l32 = load i8, ptr %ptr
  br label %loop
loop:
  %phi = phi float [ 32.0, %entry ], [ 16.0, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store i8 %l1, ptr %ptr
  store i8 %l2, ptr %ptr
  store i8 %l3, ptr %ptr
  store i8 %l4, ptr %ptr
  store i8 %l5, ptr %ptr
  store i8 %l6, ptr %ptr
  store i8 %l7, ptr %ptr
  store i8 %l8, ptr %ptr
  store i8 %l9, ptr %ptr
  store i8 %l10, ptr %ptr
  store i8 %l11, ptr %ptr
  store i8 %l12, ptr %ptr
  store i8 %l13, ptr %ptr
  store i8 %l14, ptr %ptr
  store i8 %l15, ptr %ptr
  store i8 %l16, ptr %ptr
  store i8 %l17, ptr %ptr
  store i8 %l18, ptr %ptr
  store i8 %l19, ptr %ptr
  store i8 %l20, ptr %ptr
  store i8 %l21, ptr %ptr
  store i8 %l22, ptr %ptr
  store i8 %l23, ptr %ptr
  store i8 %l24, ptr %ptr
  store i8 %l25, ptr %ptr
  store i8 %l26, ptr %ptr
  store i8 %l27, ptr %ptr
  store i8 %l28, ptr %ptr
  store i8 %l29, ptr %ptr
  store i8 %l30, ptr %ptr
  store i8 %l31, ptr %ptr
  store i8 %l32, ptr %ptr
  store float %phi, ptr %ptr
  ret void
}

define void @phi_glob(ptr %ptr) {
; X64-LABEL: <phi_glob>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    lea rax, <phi_glob+0x16>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov r12, rax
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    lea rax, <phi_glob+0x30>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov qword ptr [rbx], r12
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_glob>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.eq 0x6bc <phi_glob+0x3c>
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    b 0x6a0 <phi_glob+0x20>
; ARM64-NEXT:    str x20, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi ptr [ @glob, %entry ], [ @glob, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store ptr %phi, ptr %ptr
  ret void
}

define void @phi_ptrtoint(ptr %ptr) {
; X64-LABEL: <phi_ptrtoint>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    lea rax, <phi_ptrtoint+0x16>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov r12, rax
; X64-NEXT:  <L1>:
; X64-NEXT:    lea rax, <phi_ptrtoint+0x20>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    test ecx, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov qword ptr [rbx], r12
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_ptrtoint>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    tst w1, #0x1
; ARM64-NEXT:    b.eq 0x72c <phi_ptrtoint+0x3c>
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    b 0x710 <phi_ptrtoint+0x20>
; ARM64-NEXT:    str x20, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi i64 [ ptrtoint (ptr @glob to i64), %entry ], [ ptrtoint (ptr @glob to i64), %loop ]
  br i1 false, label %loop, label %ret
ret:
  store i64 %phi, ptr %ptr
  ret void
}

define void @phi_ptrtoint_multiedge(i1 %cond, ptr %ptr) {
; X64-LABEL: <phi_ptrtoint_multiedge>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov rbx, rsi
; X64-NEXT:    lea rax, <phi_ptrtoint_multiedge+0x16>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    test edi, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov r12, rax
; X64-NEXT:  <L1>:
; X64-NEXT:    lea rax, <phi_ptrtoint_multiedge+0x34>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    test ecx, 0x1
; X64-NEXT:    je <L2>
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov qword ptr [rbx], r12
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_ptrtoint_multiedge>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x19, x1
; ARM64-NEXT:    adrp x1, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x1, x1, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.ne 0x78c <phi_ptrtoint_multiedge+0x2c>
; ARM64-NEXT:    mov x20, x1
; ARM64-NEXT:    b 0x790 <phi_ptrtoint_multiedge+0x30>
; ARM64-NEXT:    mov x20, x1
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    tst w1, #0x1
; ARM64-NEXT:    b.eq 0x7ac <phi_ptrtoint_multiedge+0x4c>
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    b 0x790 <phi_ptrtoint_multiedge+0x30>
; ARM64-NEXT:    str x20, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br i1 %cond, label %loop, label %loop
loop:
  %phi = phi i64 [ ptrtoint (ptr @glob to i64), %entry ], [ ptrtoint (ptr @glob to i64), %entry ], [ ptrtoint (ptr @glob to i64), %loop ]
  br i1 false, label %loop, label %ret
ret:
  store i64 %phi, ptr %ptr
  ret void
}

define void @phi_ptrtoint_trunc_add(ptr %ptr) {
; X64-LABEL: <phi_ptrtoint_trunc_add>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    lea rax, <phi_ptrtoint_trunc_add+0x16>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov r12d, eax
; X64-NEXT:  <L1>:
; X64-NEXT:    lea rax, <phi_ptrtoint_trunc_add+0x23>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    test ecx, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov dword ptr [rbx], r12d
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_ptrtoint_trunc_add>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w0, w0, #0x20
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w0, w0, #0x20
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    tst w1, #0x1
; ARM64-NEXT:    b.eq 0x824 <phi_ptrtoint_trunc_add+0x44>
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    b 0x804 <phi_ptrtoint_trunc_add+0x24>
; ARM64-NEXT:    str w20, [x19]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi i32 [ add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32), %entry ], [ add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32), %loop ]
  br i1 false, label %loop, label %ret
ret:
  store i32 %phi, ptr %ptr
  ret void
}

define void @phi_struct1(ptr %ptr) {
; X64-LABEL: <phi_struct1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x30], eax
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x30], eax
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, dword ptr [rbp - 0x30]
; X64-NEXT:    mov dword ptr [rbx], eax
; X64-NEXT:    mov eax, dword ptr [rbp - 0x2c]
; X64-NEXT:    mov dword ptr [rbx + 0x4], eax
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_struct1>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    str w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.eq 0x8a4 <phi_struct1+0x44>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    str w0, [x29, #0xa4]
; ARM64-NEXT:    b 0x884 <phi_struct1+0x24>
; ARM64-NEXT:    ldr w0, [x29, #0xa0]
; ARM64-NEXT:    str w0, [x19]
; ARM64-NEXT:    ldr w0, [x29, #0xa4]
; ARM64-NEXT:    str w0, [x19, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi {i32, i32} [ {i32 0, i32 1}, %entry ], [ {i32 0, i32 1}, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store {i32, i32} %phi, ptr %ptr
  ret void
}

define void @phi_struct2(ptr %ptr) {
; X64-LABEL: <phi_struct2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x40], eax
; X64-NEXT:    lea rax, <phi_struct2+0x1e>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x40], eax
; X64-NEXT:    lea rax, <phi_struct2+0x41>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, dword ptr [rbp - 0x40]
; X64-NEXT:    mov dword ptr [rbx], eax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x38]
; X64-NEXT:    mov qword ptr [rbx + 0x8], rax
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_struct2>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.eq 0x93c <phi_struct2+0x4c>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    b 0x918 <phi_struct2+0x28>
; ARM64-NEXT:    ldr w0, [x29, #0xa0]
; ARM64-NEXT:    str w0, [x19]
; ARM64-NEXT:    ldr x0, [x29, #0xa8]
; ARM64-NEXT:    str x0, [x19, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi {i32, ptr} [ {i32 0, ptr @glob}, %entry ], [ {i32 0, ptr @glob}, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store {i32, ptr} %phi, ptr %ptr
  ret void
}

define void @phi_struct3(ptr %ptr) {
; X64-LABEL: <phi_struct3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    lea rax, <phi_struct3+0x16>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x30], ecx
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:  <L1>:
; X64-NEXT:    lea rax, <phi_struct3+0x30>
; X64-NEXT:     R_X86_64_PC32 glob-0x4
; X64-NEXT:    lea eax, [rax + 0x20]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    test edx, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov dword ptr [rbp - 0x30], ecx
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, dword ptr [rbp - 0x30]
; X64-NEXT:    mov dword ptr [rbx], eax
; X64-NEXT:    mov eax, dword ptr [rbp - 0x2c]
; X64-NEXT:    mov dword ptr [rbx + 0x4], eax
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_struct3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w0, w0, #0x20
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    str w1, [x29, #0xa0]
; ARM64-NEXT:    str w0, [x29, #0xa4]
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21 glob
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_ADD_ABS_LO12_NC glob
; ARM64-NEXT:    add w0, w0, #0x20
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    tst w2, #0x1
; ARM64-NEXT:    b.eq 0x9dc <phi_struct3+0x5c>
; ARM64-NEXT:    str w1, [x29, #0xa0]
; ARM64-NEXT:    str w0, [x29, #0xa4]
; ARM64-NEXT:    b 0x9b0 <phi_struct3+0x30>
; ARM64-NEXT:    ldr w0, [x29, #0xa0]
; ARM64-NEXT:    str w0, [x19]
; ARM64-NEXT:    ldr w0, [x29, #0xa4]
; ARM64-NEXT:    str w0, [x19, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
entry:
  br label %loop
loop:
  %phi = phi {i32, i32} [ {i32 0, i32 add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32)}, %entry ], [ {i32 0, i32 add (i32 trunc (i64 ptrtoint (ptr @glob to i64) to i32), i32 32)}, %loop ]
  br i1 false, label %loop, label %ret
ret:
  store {i32, i32} %phi, ptr %ptr
  ret void
}

define i32 @phi_gep_before_icmp(i32 %0) {
; X64-LABEL: <phi_gep_before_icmp>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    sub rsp, 0x18
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x1200]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    test ecx, ecx
; X64-NEXT:    jne <L2>
; X64-NEXT:    mov r12d, ebx
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov r13, rax
; X64-NEXT:  <L4>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    jne <L3>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov r13, rax
; X64-NEXT:    jmp <L4>
; X64-NEXT:  <L3>:
; X64-NEXT:    mov r12d, ebx
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    add rsp, 0x18
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_gep_before_icmp>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    str x21, [sp, #0x20]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.ne 0xa4c <phi_gep_before_icmp+0x3c>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    b 0xa88 <phi_gep_before_icmp+0x78>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x16, #0x1200 // =4608
; ARM64-NEXT:    add x0, x0, x16
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    cbnz w1, 0xa68 <phi_gep_before_icmp+0x58>
; ARM64-NEXT:    mov w20, w19
; ARM64-NEXT:    b 0xa88 <phi_gep_before_icmp+0x78>
; ARM64-NEXT:    mov x21, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.ne 0xa84 <phi_gep_before_icmp+0x74>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x21, x0
; ARM64-NEXT:    b 0xa6c <phi_gep_before_icmp+0x5c>
; ARM64-NEXT:    mov w20, w19
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    ldr x21, [sp, #0x20]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  br i1 false, label %2, label %6

2:                                                ; preds = %1
  %3 = icmp eq i32 0, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %4, %2
  %5 = phi ptr [ null, %4 ], [ getelementptr inbounds (i8, ptr null, i64 4608), %2 ]
  br i1 false, label %6, label %4

6:                                                ; preds = %4, %2, %1
  %7 = phi i32 [ 0, %1 ], [ %0, %2 ], [ %0, %4 ]
  ret i32 0
}

define void @phi_gep_before_icmp_twice() {
; X64-LABEL: <phi_gep_before_icmp_twice>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0xa]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    lea rcx, [rcx + 0xa]
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    test rdx, rdx
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    setl dl
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    test edx, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov rbx, rcx
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L0>:
; X64-NEXT:    mov r12, rax
; X64-NEXT:  <L3>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test eax, 0x1
; X64-NEXT:    jne <L2>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov rbx, rax
; X64-NEXT:  <L1>:
; X64-NEXT:    jmp <L1>
;
; ARM64-LABEL: <phi_gep_before_icmp_twice>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x0, #0xa
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x1, x1, #0xa
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    cmp x2, #0x0
; ARM64-NEXT:    cset w2, lt
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    tst w2, #0x1
; ARM64-NEXT:    b.eq 0xb00 <phi_gep_before_icmp_twice+0x40>
; ARM64-NEXT:    mov x19, x1
; ARM64-NEXT:    b 0xb24 <phi_gep_before_icmp_twice+0x64>
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    b.ne 0xb1c <phi_gep_before_icmp_twice+0x5c>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    b 0xb04 <phi_gep_before_icmp_twice+0x44>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    b 0xb24 <phi_gep_before_icmp_twice+0x64>
  br label %1

1:                                                ; No predecessors!
  %2 = icmp slt i64 0, 0
  br i1 false, label %5, label %3

3:                                                ; preds = %3, %1
  %4 = phi ptr [ null, %3 ], [ getelementptr inbounds (i8, ptr null, i64 10), %1 ]
  br i1 false, label %5, label %3

5:                                                ; preds = %3, %1
  %6 = phi ptr [ getelementptr inbounds (i8, ptr null, i64 10), %1 ], [ null, %3 ]
  br label %7

7:                                                ; preds = %7, %5
  br label %7
}

define i32 @phi_gep_insert_after_earlier_phi() {
; X64-LABEL: <phi_gep_insert_after_earlier_phi>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x28]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    cmp ecx, 0x0
; X64-NEXT:    je <L0>
; X64-NEXT:    cmp ecx, 0x1
; X64-NEXT:    je <L1>
; X64-NEXT:    jmp <L2>
; X64-NEXT:  <L2>:
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L0>:
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L1>:
; X64-NEXT:    mov rbx, rax
; X64-NEXT:    jmp <L4>
; X64-NEXT:  <L3>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov rbx, rax
; X64-NEXT:  <L4>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <phi_gep_insert_after_earlier_phi>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x0, #0x28
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    cmp w1, #0x0
; ARM64-NEXT:    b.eq 0xb8c <phi_gep_insert_after_earlier_phi+0x3c>
; ARM64-NEXT:    cmp w1, #0x1
; ARM64-NEXT:    b.eq 0xb90 <phi_gep_insert_after_earlier_phi+0x40>
; ARM64-NEXT:    b 0xb88 <phi_gep_insert_after_earlier_phi+0x38>
; ARM64-NEXT:    b 0xb98 <phi_gep_insert_after_earlier_phi+0x48>
; ARM64-NEXT:    b 0xb98 <phi_gep_insert_after_earlier_phi+0x48>
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    b 0xba0 <phi_gep_insert_after_earlier_phi+0x50>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  br label %2

1:
  br label %2

2:
  %3 = phi i32 [ 0, %0 ], [ 0, %1 ]
  switch i32 0, label %4 [
    i32 0, label %4
    i32 1, label %5
  ]

4:
  br label %5

5:                                                ; preds = %4, %2
  %6 = phi ptr [ null, %4 ], [ getelementptr inbounds (i8, ptr null, i64 40), %2 ]
  ret i32 0
}
