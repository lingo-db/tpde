; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i8 @icmp_eq_i8_0_br(i8 %0) {
; X64-LABEL: <icmp_eq_i8_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    test edi, edi
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_0_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cbnz w0, 0x6c <icmp_eq_i8_0_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i8 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i32_0_br(i32 %0) {
; X64-LABEL: <icmp_eq_i32_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_0_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cbnz w0, 0xe8 <icmp_eq_i32_0_br+0x48>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i32_0_br(i32 %0) {
; X64-LABEL: <icmp_ne_i32_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i32_0_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cbz w0, 0x168 <icmp_ne_i32_0_br+0x48>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i64_0_br(i64 %0) {
; X64-LABEL: <icmp_ne_i64_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i64_0_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cbz x0, 0x1e8 <icmp_ne_i64_0_br+0x48>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i64 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i8_1_br(i8 %0) {
; X64-LABEL: <icmp_eq_i8_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.ne 0x270 <icmp_eq_i8_1_br+0x50>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i8 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_eq_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.ne 0x2ec <icmp_eq_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_ne_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.eq 0x36c <icmp_ne_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}


define i8 @icmp_ugt_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_ugt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jbe <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.ls 0x3ec <icmp_ugt_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_uge_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_uge_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jb <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.lo 0x46c <icmp_uge_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ult_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_ult_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jae <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.hs 0x4ec <icmp_ult_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ule_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_ule_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    ja <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.hi 0x56c <icmp_ule_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sgt_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_sgt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jle <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.le 0x5ec <icmp_sgt_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sge_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_sge_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jl <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.lt 0x66c <icmp_sge_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_slt_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_slt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jge <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.ge 0x6ec <icmp_slt_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sle_i32_1_br(i32 %0) {
; X64-LABEL: <icmp_sle_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jg <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i32_1_br>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.gt 0x76c <icmp_sle_i32_1_br+0x4c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}



define i8 @icmp_eq_i32_0_br_no_salvage(i32 %0) {
; X64-LABEL: <icmp_eq_i32_0_br_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    test edi, edi
; X64-NEXT:    sete bl
; X64-NEXT:    jne <L0>
; X64-NEXT:    and ebx, 0x1
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_0_br_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w19, eq
; ARM64-NEXT:    b.ne 0x7f4 <icmp_eq_i32_0_br_no_salvage+0x54>
; ARM64-NEXT:    ubfx w19, w19, #0, #1
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    %2 = zext i1 %1 to i8
    ret i8 %2
block2:
    ret i8 2
}

define void @cbz_nophi(i32 %param) {
; X64-LABEL: <cbz_nophi>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov dword ptr [rbp - 0x2c], edi
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x30], eax
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    shr eax, 0x0
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, dword ptr [rbp - 0x2c]
; X64-NEXT:    test eax, eax
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x30], ecx
; X64-NEXT:    jmp <L1>
;
; ARM64-LABEL: <cbz_nophi>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    lsr w0, w0, #0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    ldr w0, [x29, #0xa0]
; ARM64-NEXT:    mov w1, w0
; ARM64-NEXT:    cbnz w1, 0x844 <cbz_nophi+0x14>
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    str w2, [x29, #0xa4]
; ARM64-NEXT:    b 0x84c <cbz_nophi+0x1c>
  br label %1

1:
  br label %2

2:
  %3 = phi i32 [ 0, %1 ], [ 0, %2 ]
  %4 = lshr i32 0, 0
  %5 = add i32 0, 0
  %6 = add i32 0, 0
  %7 = add i32 0, 0
  %8 = icmp eq i32 %param, 0
  br i1 %8, label %2, label %1
}

define void @cbz_phi() {
; X64-LABEL: <cbz_phi>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    shr eax, 0x0
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov eax, dword ptr [rbp - 0x2c]
; X64-NEXT:    test eax, eax
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x2c], ecx
; X64-NEXT:    jmp <L1>
;
; ARM64-LABEL: <cbz_phi>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    lsr w0, w0, #0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    ldr w0, [x29, #0xa0]
; ARM64-NEXT:    mov w1, w0
; ARM64-NEXT:    cbnz w1, 0x8c0 <cbz_phi+0x10>
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    str w2, [x29, #0xa0]
; ARM64-NEXT:    b 0x8c8 <cbz_phi+0x18>
  br label %1

1:
  br label %2

2:
  %3 = phi i32 [ 0, %1 ], [ 0, %2 ]
  %4 = lshr i32 0, 0
  %5 = add i32 0, 0
  %6 = add i32 0, 0
  %7 = add i32 0, 0
  %8 = icmp eq i32 %3, 0
  br i1 %8, label %2, label %1
}

