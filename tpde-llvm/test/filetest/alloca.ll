; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64


define ptr @alloca_empty() {
; X64-LABEL: <alloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rbp]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <alloca_empty>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x29, #0x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty() {
; X64-LABEL: <dynalloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dynalloca_empty>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    br label %bb1
bb1:
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty_array(i64 %0) {
; X64-LABEL: <dynalloca_empty_array>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edi, edi
; X64-NEXT:    sub rsp, rdi
; X64-NEXT:    mov rdi, rsp
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dynalloca_empty_array>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    %a = alloca {}, i64 %0
    ret ptr %a
}

define void @dyn_alloca_const() {
; X64-LABEL: <dyn_alloca_const>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_const>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x10
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %0 = alloca ptr
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_const_align_32() {
; X64-LABEL: <dyn_alloca_const_align_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_const_align_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x10
; ARM64-NEXT:    and x0, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %0 = alloca i32, align 32
    ret void
}

define void @dyn_alloca_const_align_32_ptr() {
; X64-LABEL: <dyn_alloca_const_align_32_ptr>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_const_align_32_ptr>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x10
; ARM64-NEXT:    and x0, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %0 = alloca ptr, align 32
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_dyn_cnt_i64(i64 %a) {
; X64-LABEL: <dyn_alloca_dyn_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    lea rax, [4*rbx]
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    lea rax, [8*rbx]
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    shl rax, 0x4
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    imul rax, rbx, 0x18
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    shl rax, 0x5
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    imul rax, rbx, 0x30
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    shl rax, 0x6
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    shl rax, 0xa
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    imul rbx, rbx, 0x186a0
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_cnt_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x0, sp, x19
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    sub x0, sp, x19, lsl #2
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    sub x0, sp, x19, lsl #3
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    sub x0, sp, x19, lsl #4
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x16, #0x18 // =24
; ARM64-NEXT:    mul x0, x19, x16
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    lsl x0, x19, #5
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x16, #0x30 // =48
; ARM64-NEXT:    mul x0, x19, x16
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    lsl x0, x19, #6
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    lsl x0, x19, #10
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x16, #0x86a0 // =34464
; ARM64-NEXT:    movk x16, #0x1, lsl #16
; ARM64-NEXT:    mul x19, x19, x16
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    br label %bb1
bb1:
    %a1 = alloca i8, i64 %a
    %a2 = alloca i32, i64 %a
    %a3 = alloca i64, i64 %a
    %a4 = alloca [16 x i8], i64 %a
    %a5 = alloca [24 x i8], i64 %a
    %a6 = alloca [32 x i8], i64 %a
    %a7 = alloca [48 x i8], i64 %a
    %a8 = alloca [64 x i8], i64 %a
    %a9 = alloca [1024 x i8], i64 %a
    %a10 = alloca [100000 x i8], i64 %a
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i32(i32 %0) {
; X64-LABEL: <dyn_alloca_dyn_i8_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov ebx, ebx
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_i8_cnt_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x19, x19, #0, #32
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i32 %0
    ret void
}

define void @dyn_alloca_dyn_i32_cnt_i32(i32 %0) {
; X64-LABEL: <dyn_alloca_dyn_i32_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov ebx, ebx
; X64-NEXT:    lea rbx, [4*rbx]
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_i32_cnt_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x19, x19, #0, #32
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret void
}

define void @dyn_alloca_dyn_i32_cnt_i37(i37 %0) {
; X64-LABEL: <dyn_alloca_dyn_i32_cnt_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rbx, rax
; X64-NEXT:    lea rbx, [4*rbx]
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_i32_cnt_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    ubfx x19, x19, #0, #37
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i37 %0
    ret void
}


%struct.i32_3 = type { i32, i32, i32 }

define void @dyn_alloca_dyn_si3_cnt_i64(i64 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x16
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret void
}

define void @dyn_alloca_dyn_si3_cnt_i32(i32 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov ebx, ebx
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x19, x19, #0, #32
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x16
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1

bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret void
}

; TODO: this should zero-extend
define void @dyn_alloca_dyn_si3_cnt_i16(i16 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    movzx ebx, bx
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x19, x19, #0, #16
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x16
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret void
}



define i64 @dyn_alloca_dyn_i8_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: <dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x0, sp, x19
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_i32_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: <dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rax, [4*rax]
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x0, x19, #0, #32
; ARM64-NEXT:    sub x0, sp, x0, lsl #2
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret i32 %0
}

define i64 @dyn_alloca_dyn_si3_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    imul rax, rbx, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x0, x19, x16
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_si3_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x0, x19, #0, #32
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x16
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret i32 %0
}

define i16 @dyn_alloca_dyn_si3_cnt_i16_no_salvage(i16 %0) {
; X64-LABEL: <dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    movzx eax, bx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    ubfx x0, x19, #0, #16
; ARM64-NEXT:    mov x16, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x16
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret i16 %0
}

define ptr @alloca_align_4k() {
; X64-LABEL: <alloca_align_4k>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x1000
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <alloca_align_4k>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x10
; ARM64-NEXT:    and x0, x0, #0xfffffffffffff000
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    %a = alloca i32, align 4096
    ret ptr %a
}

define ptr @dynalloca_align_16(i64 %0) {
; X64-LABEL: <dynalloca_align_16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dynalloca_align_16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    sub x19, sp, x0
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %2 = alloca i8, i64 %0, align 16
  br label %3

3:
  ret ptr %2
}

define ptr @dynalloca_align_4k() {
; X64-LABEL: <dynalloca_align_4k>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x1000
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <dynalloca_align_4k>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, sp, #0x10
; ARM64-NEXT:    and x0, x0, #0xfffffffffffff000
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
    br label %bb1
bb1:
    %a = alloca i32, align 4096
    ret ptr %a
}

; Reduced test case causing register exhaustion during spilling.
declare void @f1(i32, ...);
define void @f2(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr %5, ptr %6, ptr %7, ptr %8, ptr %9, ptr %10, ptr %11, ptr %12, ptr %13, ptr %14, ptr %15, ptr %16, ptr %17, ptr %18, ptr %19, ptr %20, ptr %21, ptr %22, ptr %23) {
; X64-LABEL: <f2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x9ce8
; X64-NEXT:    mov rax, qword ptr [rbp + 0x10]
; X64-NEXT:    mov rbx, qword ptr [rbp + 0x18]
; X64-NEXT:    mov r10, qword ptr [rbp + 0x20]
; X64-NEXT:    mov r11, qword ptr [rbp + 0x28]
; X64-NEXT:    mov r12, qword ptr [rbp + 0x30]
; X64-NEXT:    mov r13, qword ptr [rbp + 0x38]
; X64-NEXT:    mov r14, qword ptr [rbp + 0x40]
; X64-NEXT:    mov r15, qword ptr [rbp + 0x48]
; X64-NEXT:    mov qword ptr [rbp - 0x30], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x50]
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x58]
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x60]
; X64-NEXT:    mov qword ptr [rbp - 0x48], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x68]
; X64-NEXT:    mov qword ptr [rbp - 0x50], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x70]
; X64-NEXT:    mov qword ptr [rbp - 0x58], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x78]
; X64-NEXT:    mov qword ptr [rbp - 0x60], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x80]
; X64-NEXT:    mov qword ptr [rbp - 0x68], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x88]
; X64-NEXT:    mov qword ptr [rbp - 0x70], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x90]
; X64-NEXT:    mov qword ptr [rbp - 0x78], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x98]
; X64-NEXT:    mov qword ptr [rbp - 0x80], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x38]
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40]
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x48]
; X64-NEXT:    mov qword ptr [rbp - 0x48], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x50]
; X64-NEXT:    mov qword ptr [rbp - 0x50], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x58]
; X64-NEXT:    mov qword ptr [rbp - 0x58], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x60]
; X64-NEXT:    mov qword ptr [rbp - 0x60], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x68]
; X64-NEXT:    mov qword ptr [rbp - 0x68], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x70]
; X64-NEXT:    mov qword ptr [rbp - 0x70], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x78]
; X64-NEXT:    mov qword ptr [rbp - 0x78], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x80]
; X64-NEXT:    mov qword ptr [rbp - 0x80], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cc8], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cd0], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cd8], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9ce0], rdi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9ce8], rsi
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cf0], rdx
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cf8], rcx
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d00], r8
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d08], r9
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    sub rsp, 0x130
; X64-NEXT:    mov qword ptr [rbp - 0x9d10], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x8], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x10], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x18], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x20], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x28], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x30], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x38], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x40], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9ce8]
; X64-NEXT:    mov qword ptr [rsp + 0x48], rax
; X64-NEXT:    mov qword ptr [rsp + 0x50], r10
; X64-NEXT:    mov qword ptr [rsp + 0x58], r11
; X64-NEXT:    mov qword ptr [rsp + 0x60], r12
; X64-NEXT:    mov qword ptr [rsp + 0x68], r13
; X64-NEXT:    mov qword ptr [rsp + 0x70], r14
; X64-NEXT:    mov qword ptr [rsp + 0x78], r15
; X64-NEXT:    mov rax, qword ptr [rbp - 0x38]
; X64-NEXT:    mov qword ptr [rsp + 0x80], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40]
; X64-NEXT:    mov qword ptr [rsp + 0x88], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x48]
; X64-NEXT:    mov qword ptr [rsp + 0x90], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x50]
; X64-NEXT:    mov qword ptr [rsp + 0x98], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x58]
; X64-NEXT:    mov qword ptr [rsp + 0xa0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x60]
; X64-NEXT:    mov qword ptr [rsp + 0xa8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x68]
; X64-NEXT:    mov qword ptr [rsp + 0xb0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x70]
; X64-NEXT:    mov qword ptr [rsp + 0xb8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x78]
; X64-NEXT:    mov qword ptr [rsp + 0xc0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x80]
; X64-NEXT:    mov qword ptr [rsp + 0xc8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9ce0]
; X64-NEXT:    mov qword ptr [rsp + 0xd0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cc8]
; X64-NEXT:    mov qword ptr [rsp + 0xd8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cd0]
; X64-NEXT:    mov qword ptr [rsp + 0xe0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cf0]
; X64-NEXT:    mov qword ptr [rsp + 0xe8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cf8]
; X64-NEXT:    mov qword ptr [rsp + 0xf0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d00]
; X64-NEXT:    mov qword ptr [rsp + 0xf8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d08]
; X64-NEXT:    mov qword ptr [rsp + 0x100], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x30]
; X64-NEXT:    mov qword ptr [rsp + 0x108], rax
; X64-NEXT:    mov qword ptr [rsp + 0x110], rbx
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cd8]
; X64-NEXT:    mov qword ptr [rsp + 0x118], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d10]
; X64-NEXT:    mov qword ptr [rsp + 0x120], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 f1-0x4
; X64-NEXT:    add rsp, 0x130
; X64-NEXT:    add rsp, 0x9ce8
; X64-NEXT:    pop r15
; X64-NEXT:    pop r14
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f2>:
; ARM64:         sub sp, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    stp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add x17, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    ldr x9, [x17]
; ARM64-NEXT:    ldr x10, [x17, #0x8]
; ARM64-NEXT:    ldr x11, [x17, #0x10]
; ARM64-NEXT:    ldr x12, [x17, #0x18]
; ARM64-NEXT:    ldr x13, [x17, #0x20]
; ARM64-NEXT:    ldr x14, [x17, #0x28]
; ARM64-NEXT:    ldr x15, [x17, #0x30]
; ARM64-NEXT:    ldr x18, [x17, #0x38]
; ARM64-NEXT:    ldr x19, [x17, #0x40]
; ARM64-NEXT:    ldr x20, [x17, #0x48]
; ARM64-NEXT:    ldr x21, [x17, #0x50]
; ARM64-NEXT:    ldr x22, [x17, #0x58]
; ARM64-NEXT:    ldr x23, [x17, #0x60]
; ARM64-NEXT:    ldr x24, [x17, #0x68]
; ARM64-NEXT:    ldr x25, [x17, #0x70]
; ARM64-NEXT:    ldr x26, [x17, #0x78]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    mov w27, #0x0 // =0
; ARM64-NEXT:    mov w28, #0x0 // =0
; ARM64-NEXT:    mov w30, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x0, [x16, #0xce0]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x1, [x16, #0xce8]
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x2, [x16, #0xcf0]
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x3, [x16, #0xcf8]
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x4, [x16, #0xd00]
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x5, [x16, #0xd08]
; ARM64-NEXT:    mov w5, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x6, [x16, #0xd10]
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x7, [x16, #0xd18]
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    sub sp, sp, #0x120
; ARM64-NEXT:    add x16, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x8, [x16, #0xd20]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x8]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x10]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x18]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x20]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x28]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x30]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xce8]
; ARM64-NEXT:    str x8, [sp, #0x38]
; ARM64-NEXT:    str x9, [sp, #0x40]
; ARM64-NEXT:    str x10, [sp, #0x48]
; ARM64-NEXT:    str x11, [sp, #0x50]
; ARM64-NEXT:    str x12, [sp, #0x58]
; ARM64-NEXT:    str x13, [sp, #0x60]
; ARM64-NEXT:    str x14, [sp, #0x68]
; ARM64-NEXT:    str x15, [sp, #0x70]
; ARM64-NEXT:    str x18, [sp, #0x78]
; ARM64-NEXT:    str x19, [sp, #0x80]
; ARM64-NEXT:    str x20, [sp, #0x88]
; ARM64-NEXT:    str x21, [sp, #0x90]
; ARM64-NEXT:    str x22, [sp, #0x98]
; ARM64-NEXT:    str x23, [sp, #0xa0]
; ARM64-NEXT:    str x24, [sp, #0xa8]
; ARM64-NEXT:    str x25, [sp, #0xb0]
; ARM64-NEXT:    str x26, [sp, #0xb8]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xce0]
; ARM64-NEXT:    str x8, [sp, #0xc0]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xd20]
; ARM64-NEXT:    str x8, [sp, #0xc8]
; ARM64-NEXT:    str x27, [sp, #0xd0]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xcf0]
; ARM64-NEXT:    str x8, [sp, #0xd8]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xcf8]
; ARM64-NEXT:    str x8, [sp, #0xe0]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xd00]
; ARM64-NEXT:    str x8, [sp, #0xe8]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xd08]
; ARM64-NEXT:    str x8, [sp, #0xf0]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xd10]
; ARM64-NEXT:    str x8, [sp, #0xf8]
; ARM64-NEXT:    add x8, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    ldr x8, [x8, #0xd18]
; ARM64-NEXT:    str x8, [sp, #0x100]
; ARM64-NEXT:    str x28, [sp, #0x108]
; ARM64-NEXT:    str x30, [sp, #0x110]
; ARM64-NEXT:    bl 0x9c0 <f2+0x1d0>
; ARM64-NEXT:     R_AARCH64_CALL26 f1
; ARM64-NEXT:    add sp, sp, #0x120
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    ldp x21, x22, [sp, #0x20]
; ARM64-NEXT:    ldp x23, x24, [sp, #0x30]
; ARM64-NEXT:    ldp x25, x26, [sp, #0x40]
; ARM64-NEXT:    ldp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add sp, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    ret
  %25 = alloca [10000 x i32], align 4
  %26 = getelementptr i8, ptr %8, i64 0
  %27 = getelementptr i8, ptr %9, i64 0
  %28 = getelementptr i8, ptr %10, i64 0
  %29 = getelementptr i8, ptr %11, i64 0
  %30 = getelementptr i8, ptr %12, i64 0
  %31 = getelementptr i8, ptr %13, i64 0
  %32 = getelementptr i8, ptr %14, i64 0
  %33 = getelementptr i8, ptr %15, i64 0
  %34 = getelementptr i8, ptr %16, i64 0
  %35 = getelementptr i8, ptr %17, i64 0
  %36 = getelementptr i8, ptr %18, i64 0
  %37 = getelementptr i8, ptr %19, i64 0
  %38 = getelementptr i8, ptr %20, i64 0
  %39 = getelementptr i8, ptr %21, i64 0
  %40 = getelementptr i8, ptr %22, i64 0
  %41 = getelementptr i8, ptr %23, i64 0
  %42 = getelementptr i8, ptr %0, i64 0
  %43 = getelementptr i8, ptr null, i64 0
  %44 = getelementptr i8, ptr null, i64 0
  %45 = getelementptr i8, ptr null, i64 0
  %46 = getelementptr i8, ptr null, i64 0
  call void (i32, ...) @f1(i32 0, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr %1, ptr %26, ptr %27, ptr %28, ptr %29, ptr %30, ptr %31, ptr %32, ptr %33, ptr %34, ptr %35, ptr %36, ptr %37, ptr %38, ptr %39, ptr %40, ptr %41, ptr %42, ptr %43, ptr %44, ptr %2, ptr %3, ptr %4, ptr %5, ptr %6, ptr %7, ptr %45, ptr %46)
  ret void
}

define void @alloca_manyregs(i32 %0, ptr %1, ptr %2, ptr %3, i64 %4, i32 %5, ptr %r1, ptr %6, ptr %7, ptr %t, ptr %q, ptr %r, i64 %8, i32 %9, i64 %10, ptr %m, ptr %11, ptr %12, i32 %13, i64 %14, i32 %15, ptr %16, ptr %17, i64 %18, i32 %19, i32 %20, i32 %21) {
; X64-LABEL: <alloca_manyregs>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x40808
; X64-NEXT:    mov rax, qword ptr [rbp + 0x10]
; X64-NEXT:    mov rbx, qword ptr [rbp + 0x18]
; X64-NEXT:    mov r10, qword ptr [rbp + 0x20]
; X64-NEXT:    mov r11, qword ptr [rbp + 0x28]
; X64-NEXT:    mov r12, qword ptr [rbp + 0x30]
; X64-NEXT:    mov r13, qword ptr [rbp + 0x38]
; X64-NEXT:    mov r14, qword ptr [rbp + 0x40]
; X64-NEXT:    mov r15d, dword ptr [rbp + 0x48]
; X64-NEXT:    mov qword ptr [rbp - 0x30], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x50]
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x58]
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x60]
; X64-NEXT:    mov qword ptr [rbp - 0x48], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x68]
; X64-NEXT:    mov qword ptr [rbp - 0x50], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0x70]
; X64-NEXT:    mov dword ptr [rbp - 0x54], eax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x78]
; X64-NEXT:    mov qword ptr [rbp - 0x60], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0x80]
; X64-NEXT:    mov dword ptr [rbp - 0x58], eax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x88]
; X64-NEXT:    mov qword ptr [rbp - 0x68], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x90]
; X64-NEXT:    mov qword ptr [rbp - 0x70], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x98]
; X64-NEXT:    mov qword ptr [rbp - 0x78], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xa0]
; X64-NEXT:    mov dword ptr [rbp - 0x7c], eax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xa8]
; X64-NEXT:    mov dword ptr [rbp - 0x80], eax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xb0]
; X64-NEXT:    mov dword ptr [rbp - 0x407c4], eax
; X64-NEXT:    mov qword ptr [rbp - 0x407d0], rcx
; X64-NEXT:    mov qword ptr [rbp - 0x407d8], rdx
; X64-NEXT:    mov qword ptr [rbp - 0x407e0], rbx
; X64-NEXT:    mov qword ptr [rbp - 0x407e8], rsi
; X64-NEXT:    mov dword ptr [rbp - 0x407c8], edi
; X64-NEXT:    mov qword ptr [rbp - 0x407f0], r8
; X64-NEXT:    mov dword ptr [rbp - 0x407f4], r9d
; X64-NEXT:    mov qword ptr [rbp - 0x40800], r10
; X64-NEXT:    mov qword ptr [rbp - 0x40808], r11
; X64-NEXT:    mov qword ptr [rbp - 0x40810], r12
; X64-NEXT:    mov qword ptr [rbp - 0x40818], r13
; X64-NEXT:    mov qword ptr [rbp - 0x40820], r14
; X64-NEXT:    mov dword ptr [rbp - 0x407f8], r15d
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x40824], eax
; X64-NEXT:    mov eax, dword ptr [rbp - 0x407c4]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov rax, qword ptr [rbp - 0x407d0]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x407f0]
; X64-NEXT:    lea rdx, [rax + rcx]
; X64-NEXT:    mov edx, dword ptr [rbp - 0x407f4]
; X64-NEXT:    mov ebx, edx
; X64-NEXT:    or ebx, 0x0
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x30]
; X64-NEXT:    mov esi, dword ptr [rbx]
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x407e0]
; X64-NEXT:    mov edi, dword ptr [rsi]
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x40800]
; X64-NEXT:    mov dword ptr [rdi], 0x0
; X64-NEXT:    mov r8, qword ptr [rbp - 0x40808]
; X64-NEXT:    mov r9d, dword ptr [r8]
; X64-NEXT:    mov r9, qword ptr [rbp - 0x40810]
; X64-NEXT:    mov r10d, dword ptr [r9]
; X64-NEXT:    mov r10, qword ptr [rbp - 0x40818]
; X64-NEXT:    mov r11d, dword ptr [r10]
; X64-NEXT:    mov r11, qword ptr [rbp - 0x407e8]
; X64-NEXT:    mov r12, r11
; X64-NEXT:    mov r12, qword ptr [rbp - 0x40820]
; X64-NEXT:    test r12, r12
; X64-NEXT:    sete r13b
; X64-NEXT:    mov r13d, dword ptr [rbp - 0x407f8]
; X64-NEXT:    mov r14d, r13d
; X64-NEXT:    and r14d, 0x0
; X64-NEXT:    mov r14, qword ptr [rbp - 0x38]
; X64-NEXT:    test r14, r14
; X64-NEXT:    sete r15b
; X64-NEXT:    mov r15, qword ptr [rbp - 0x40]
; X64-NEXT:    mov eax, dword ptr [r15]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x48]
; X64-NEXT:    mov edx, dword ptr [rcx]
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x50]
; X64-NEXT:    mov dword ptr [rdx], 0x0
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x54]
; X64-NEXT:    mov dword ptr [0x0], ecx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x60]
; X64-NEXT:    test rcx, rcx
; X64-NEXT:    sete cl
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x407d8]
; X64-NEXT:    lea rdx, [rcx + 0x4]
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov ebx, dword ptr [rbp - 0x58]
; X64-NEXT:    mov ecx, ebx
; X64-NEXT:    shr edx, cl
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x68]
; X64-NEXT:    mov rdx, rcx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x70]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x78]
; X64-NEXT:    lea rbx, [rdx + 4*rcx]
; X64-NEXT:    mov ebx, dword ptr [rbp - 0x7c]
; X64-NEXT:    mov ecx, ebx
; X64-NEXT:    and ecx, dword ptr [rbp - 0x80]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x407c4]
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    shr edx, 0x0
; X64-NEXT:    mov edx, dword ptr [rbp - 0x407c8]
; X64-NEXT:    mov ecx, edx
; X64-NEXT:    or ecx, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x40824], eax
; X64-NEXT:    jmp <L0>
;
; ARM64-LABEL: <alloca_manyregs>:
; ARM64:         sub sp, sp, #0x41, lsl #12 // =0x41000
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    stp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add x17, sp, #0x41, lsl #12 // =0x41000
; ARM64-NEXT:    ldr x9, [x17]
; ARM64-NEXT:    ldr x10, [x17, #0x8]
; ARM64-NEXT:    ldr x11, [x17, #0x10]
; ARM64-NEXT:    ldr x12, [x17, #0x18]
; ARM64-NEXT:    ldr x13, [x17, #0x20]
; ARM64-NEXT:    ldr w14, [x17, #0x28]
; ARM64-NEXT:    ldr x15, [x17, #0x30]
; ARM64-NEXT:    ldr x18, [x17, #0x38]
; ARM64-NEXT:    ldr x19, [x17, #0x40]
; ARM64-NEXT:    ldr x20, [x17, #0x48]
; ARM64-NEXT:    ldr w21, [x17, #0x50]
; ARM64-NEXT:    ldr x22, [x17, #0x58]
; ARM64-NEXT:    ldr w23, [x17, #0x60]
; ARM64-NEXT:    ldr x24, [x17, #0x68]
; ARM64-NEXT:    ldr x25, [x17, #0x70]
; ARM64-NEXT:    ldr x26, [x17, #0x78]
; ARM64-NEXT:    ldr w27, [x17, #0x80]
; ARM64-NEXT:    ldr w28, [x17, #0x88]
; ARM64-NEXT:    ldr w30, [x17, #0x90]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w0, [x16, #0x7e0]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x1, [x16, #0x7e8]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x2, [x16, #0x7f0]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x3, [x16, #0x7f8]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x4, [x16, #0x800]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w5, [x16, #0x7e4]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x6, [x16, #0x808]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x7, [x16, #0x810]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x9, [x16, #0x818]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x10, [x16, #0x820]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x11, [x16, #0x828]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x12, [x16, #0x830]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x13, [x16, #0x838]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w14, [x16, #0x840]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x15, [x16, #0x848]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x18, [x16, #0x850]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x19, [x16, #0x858]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x20, [x16, #0x860]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w21, [x16, #0x844]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x22, [x16, #0x868]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w23, [x16, #0x870]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x24, [x16, #0x878]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x25, [x16, #0x880]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str x26, [x16, #0x888]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w27, [x16, #0x874]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w28, [x16, #0x890]
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w30, [x16, #0x894]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w8, [x16, #0x898]
; ARM64-NEXT:    add x0, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x0, [x0, #0x7f8]
; ARM64-NEXT:    add x1, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x1, [x1, #0x800]
; ARM64-NEXT:    add x2, x0, x1
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    add x3, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w3, [x3, #0x7e4]
; ARM64-NEXT:    orr w2, w2, w3
; ARM64-NEXT:    add x2, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x2, [x2, #0x808]
; ARM64-NEXT:    ldr w4, [x2]
; ARM64-NEXT:    add x4, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x4, [x4, #0x810]
; ARM64-NEXT:    ldr w5, [x4]
; ARM64-NEXT:    mov w5, #0x0 // =0
; ARM64-NEXT:    add x6, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x6, [x6, #0x818]
; ARM64-NEXT:    str w5, [x6]
; ARM64-NEXT:    add x5, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x5, [x5, #0x820]
; ARM64-NEXT:    ldr w7, [x5]
; ARM64-NEXT:    add x7, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x7, [x7, #0x828]
; ARM64-NEXT:    ldr w8, [x7]
; ARM64-NEXT:    add x8, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x8, [x8, #0x830]
; ARM64-NEXT:    ldr w9, [x8]
; ARM64-NEXT:    add x9, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x9, [x9, #0x7e8]
; ARM64-NEXT:    mov x10, x9
; ARM64-NEXT:    add x10, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x10, [x10, #0x838]
; ARM64-NEXT:    cmp x10, #0x0
; ARM64-NEXT:    cset w11, eq
; ARM64-NEXT:    mov w11, #0x0 // =0
; ARM64-NEXT:    add x12, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w12, [x12, #0x840]
; ARM64-NEXT:    and w11, w11, w12
; ARM64-NEXT:    add x11, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x11, [x11, #0x848]
; ARM64-NEXT:    cmp x11, #0x0
; ARM64-NEXT:    cset w13, eq
; ARM64-NEXT:    add x13, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x13, [x13, #0x850]
; ARM64-NEXT:    ldr w14, [x13]
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    add w14, w14, #0x0
; ARM64-NEXT:    add x15, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x15, [x15, #0x858]
; ARM64-NEXT:    ldr w18, [x15]
; ARM64-NEXT:    mov w18, #0x0 // =0
; ARM64-NEXT:    add x19, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x19, [x19, #0x860]
; ARM64-NEXT:    str w18, [x19]
; ARM64-NEXT:    add x18, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w18, [x18, #0x844]
; ARM64-NEXT:    mov w20, #0x0 // =0
; ARM64-NEXT:    str w18, [x20]
; ARM64-NEXT:    add x20, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x20, [x20, #0x868]
; ARM64-NEXT:    cmp x20, #0x0
; ARM64-NEXT:    cset w21, eq
; ARM64-NEXT:    add x21, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x21, [x21, #0x7f0]
; ARM64-NEXT:    add x22, x21, #0x4
; ARM64-NEXT:    mov w22, #0x0 // =0
; ARM64-NEXT:    add x23, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w23, [x23, #0x870]
; ARM64-NEXT:    lsr w22, w22, w23
; ARM64-NEXT:    add x22, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x22, [x22, #0x878]
; ARM64-NEXT:    mov x24, x22
; ARM64-NEXT:    add x24, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x24, [x24, #0x880]
; ARM64-NEXT:    add x25, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr x25, [x25, #0x888]
; ARM64-NEXT:    add x26, x24, x25, lsl #2
; ARM64-NEXT:    add x26, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w26, [x26, #0x890]
; ARM64-NEXT:    add x27, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w27, [x27, #0x874]
; ARM64-NEXT:    and w28, w26, w27
; ARM64-NEXT:    add x28, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w28, [x28, #0x894]
; ARM64-NEXT:    lsr w30, w28, #0
; ARM64-NEXT:    mov w30, #0x0 // =0
; ARM64-NEXT:    add x0, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    ldr w0, [x0, #0x7e0]
; ARM64-NEXT:    orr w30, w30, w0
; ARM64-NEXT:    add x16, x29, #0x40, lsl #12 // =0x40000
; ARM64-NEXT:    str w14, [x16, #0x898]
; ARM64-NEXT:    b 0xb54 <alloca_manyregs+0x154>
  %23 = alloca [66000 x i32], align 4
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ 0, %22 ], [ %38, %24 ]
  %26 = getelementptr [50177 x i8], ptr %3, i64 0, i64 %4
  %27 = or i32 %5, 0
  %28 = load i32, ptr %r1, align 4
  %29 = load i32, ptr %6, align 4
  store i32 0, ptr %7, align 4
  %30 = load i32, ptr %t, align 4
  %31 = load i32, ptr %q, align 4
  %32 = load i32, ptr %r, align 4
  %33 = getelementptr [5 x i32], ptr %1, i64 0, i64 0
  %34 = icmp eq i64 0, %8
  %35 = and i32 0, %9
  %36 = icmp eq i64 0, %10
  %37 = load i32, ptr %m, align 4
  %38 = add i32 0, 0
  %39 = load i32, ptr %11, align 4
  store i32 0, ptr %12, align 4
  store i32 %13, ptr null, align 4
  %40 = icmp eq i64 0, %14
  %41 = getelementptr [5 x i32], ptr %2, i64 0, i64 1
  %42 = lshr i32 0, %15
  %43 = getelementptr [66000 x i32], ptr %16, i64 0, i64 0
  %44 = getelementptr [66000 x i32], ptr %17, i64 0, i64 %18
  %45 = and i32 %19, %20
  %46 = lshr i32 %21, 0
  %47 = or i32 0, %0
  br label %24
}

; COM: TODO
;declare void @func_9args(ptr, i64, i64, i64, i64, i64, i64, i64, i64)

;define void @dyn_alloca_correct_sp_ptr(i64 %0) {
;entry:
;    %1 = alloca i64
;    %2 = alloca i64, i64 %0
;    call void @func_9args(ptr %1, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0)
;    ret void
;}
