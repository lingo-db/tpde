; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define void @udiv_i8_1(i8 %0) {
; X64-LABEL: <udiv_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i8 %0, 1
  ret void
}

define void @udiv_i8_28(i8 %0) {
; X64-LABEL: <udiv_i8_28>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1c
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_28>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    mov x1, #0x1c // =28
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i8 %0, 28
  ret void
}

define void @udiv_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: <udiv_i8_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    movzx esi, sil
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i8 %0, %1
  ret void
}

define void @udiv_i8_32(i8 %0) {
; X64-LABEL: <udiv_i8_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x20
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    mov x1, #0x20 // =32
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i8 %0, 32
  ret void
}

define void @udiv_i16_1(i16 %0) {
; X64-LABEL: <udiv_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i16 %0, 1
  ret void
}

define void @udiv_i16_28(i16 %0) {
; X64-LABEL: <udiv_i16_28>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1c
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_28>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    mov x1, #0x1c // =28
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i16 %0, 28
  ret void
}

define void @udiv_i16_32(i16 %0) {
; X64-LABEL: <udiv_i16_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x20
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    mov x1, #0x20 // =32
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i16 %0, 32
  ret void
}

define void @udiv_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: <udiv_i16_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    movzx esi, si
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i16 %0, %1
  ret void
}

define void @udiv_i32_1(i32 %0) {
; X64-LABEL: <udiv_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i32 %0, 1
  ret void
}

define void @udiv_i32_28(i32 %0) {
; X64-LABEL: <udiv_i32_28>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1c
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_28>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1c // =28
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i32 %0, 28
  ret void
}

define void @udiv_i32_32(i32 %0) {
; X64-LABEL: <udiv_i32_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x20
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x20 // =32
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i32 %0, 32
  ret void
}

define void @udiv_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: <udiv_i32_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i32 %0, %1
  ret void
}

define void @udiv_i64_1(i64 %0) {
; X64-LABEL: <udiv_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i64 %0, 1
  ret void
}

define void @udiv_i64_28(i64 %0) {
; X64-LABEL: <udiv_i64_28>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x1c
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_28>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1c // =28
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i64 %0, 28
  ret void
}

define void @udiv_i64_32(i64 %0) {
; X64-LABEL: <udiv_i64_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x20
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x20 // =32
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = udiv i64 %0, 32
  ret void
}

define void @udiv_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: <udiv_i64_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i64 %0, %1
  ret void
}

define void @udiv_i8_salvage(i8 %0, i8 %1) {
; X64-LABEL: <udiv_i8_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    movzx esi, sil
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i8 %0, %1
  ret void
}

define void @udiv_i16_salvage(i16 %0, i16 %1) {
; X64-LABEL: <udiv_i16_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    movzx esi, si
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i16 %0, %1
  ret void
}

define void @udiv_i32_salvage(i32 %0, i32 %1) {
; X64-LABEL: <udiv_i32_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i32 %0, %1
  ret void
}

define void @udiv_i64_salvage(i64 %0, i64 %1) {
; X64-LABEL: <udiv_i64_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i64 %0, %1
  ret void
}

define void @udiv_i8_no_salvage(i8 %0, i8 %1) {
; X64-LABEL: <udiv_i8_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, dil
; X64-NEXT:    movzx esi, sil
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    div esi
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i8_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w2, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w2, w1
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w0, w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i8 %0, %1
  %3 = udiv i8 %0, %2
  ret void
}

define void @udiv_i16_no_salvage(i16 %0, i16 %1) {
; X64-LABEL: <udiv_i16_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, di
; X64-NEXT:    movzx esi, si
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    div esi
; X64-NEXT:    movzx edi, di
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i16_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w2, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w2, w1
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w2, w2
; ARM64-NEXT:    udiv w0, w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i16 %0, %1
  %3 = udiv i16 %0, %2
  ret void
}

define void @udiv_i32_no_salvage(i32 %0, i32 %1) {
; X64-LABEL: <udiv_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div esi
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, edi
; X64-NEXT:    div dword ptr [rbp - 0x2c]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv w1, w0, w1
; ARM64-NEXT:    udiv w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i32 %0, %1
  %3 = udiv i32 %0, %2
  ret void
}

define void @udiv_i64_no_salvage(i64 %0, i64 %1) {
; X64-LABEL: <udiv_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div rsi
; X64-NEXT:    mov qword ptr [rbp - 0x30], rax
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    div qword ptr [rbp - 0x30]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    udiv x1, x0, x1
; ARM64-NEXT:    udiv x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = udiv i64 %0, %1
  %3 = udiv i64 %0, %2
  ret void
}

define i128 @udiv_i128(i128 %0, i128 %1) {
; X64-LABEL: <udiv_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __udivti3-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    bl 0x790 <udiv_i128+0x10>
; ARM64-NEXT:     R_AARCH64_CALL26 __udivti3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = udiv i128 %0, %1
  ret i128 %r
}

define i128 @udiv_i128_twice(i128 %0, i128 %1) {
; X64-LABEL: <udiv_i128_twice>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov qword ptr [rbp - 0x40], rdi
; X64-NEXT:    mov qword ptr [rbp - 0x38], rsi
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __udivti3-0x4
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x38]
; X64-NEXT:    mov qword ptr [rbp - 0x38], rdx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x38]
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 __udivti3-0x4
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <udiv_i128_twice>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str x0, [x29, #0xa0]
; ARM64-NEXT:    str x1, [x29, #0xa8]
; ARM64-NEXT:    bl 0x7d8 <udiv_i128_twice+0x18>
; ARM64-NEXT:     R_AARCH64_CALL26 __udivti3
; ARM64-NEXT:    str x0, [x29, #0xb0]
; ARM64-NEXT:    ldr x0, [x29, #0xa0]
; ARM64-NEXT:    str x1, [x29, #0xb8]
; ARM64-NEXT:    ldr x1, [x29, #0xa8]
; ARM64-NEXT:    ldr x2, [x29, #0xb0]
; ARM64-NEXT:    ldr x3, [x29, #0xb8]
; ARM64-NEXT:    bl 0x7f4 <udiv_i128_twice+0x34>
; ARM64-NEXT:     R_AARCH64_CALL26 __udivti3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %t = udiv i128 %0, %1
  %r = udiv i128 %0, %t
  ret i128 %r
}
