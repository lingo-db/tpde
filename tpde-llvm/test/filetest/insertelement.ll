; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define void @ins_v5i1_0(ptr %p, i1 %e) {
; X64-LABEL: <ins_v5i1_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov byte ptr [rdi], sil
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i1_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    mov w3, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsr x3, x3, #0
; ARM64-NEXT:    lsr x1, x1, #0
; ARM64-NEXT:    bic x3, x2, x3
; ARM64-NEXT:    orr x2, x3, x1
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <5 x i1>, ptr %p
  %r = insertelement <5 x i1> %v, i1 %e, i32 0
  store <5 x i1> %r, ptr %p
  ret void
}

define void @ins_v5i1_3(ptr %p, i1 %e) {
; X64-LABEL: <ins_v5i1_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, 0x3
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov byte ptr [rdi], sil
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i1_3>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    mov w3, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsl x3, x3, #3
; ARM64-NEXT:    lsl x1, x1, #3
; ARM64-NEXT:    bic x3, x2, x3
; ARM64-NEXT:    orr x2, x3, x1
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <5 x i1>, ptr %p
  %r = insertelement <5 x i1> %v, i1 %e, i32 3
  store <5 x i1> %r, ptr %p
  ret void
}

define void @ins_v5i1_chain(ptr %p, i1 %e0, i1 %e1, i1 %e2, i1 %e3, i1 %e4) {
; X64-LABEL: <ins_v5i1_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov byte ptr [rbp - 0x29], cl
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    btr rsi, rcx
; X64-NEXT:    mov edx, edx
; X64-NEXT:    shl rdx, cl
; X64-NEXT:    or rdx, rsi
; X64-NEXT:    mov ecx, 0x2
; X64-NEXT:    btr rdx, rcx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x29]
; X64-NEXT:    shl rax, cl
; X64-NEXT:    or rax, rdx
; X64-NEXT:    mov ecx, 0x3
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov r8d, r8d
; X64-NEXT:    shl r8, cl
; X64-NEXT:    or r8, rax
; X64-NEXT:    mov ecx, 0x4
; X64-NEXT:    btr r8, rcx
; X64-NEXT:    mov r9d, r9d
; X64-NEXT:    shl r9, cl
; X64-NEXT:    or r9, r8
; X64-NEXT:    mov byte ptr [rdi], r9b
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i1_chain>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w6, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsr x6, x6, #0
; ARM64-NEXT:    lsr x1, x1, #0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    bic x6, x7, x6
; ARM64-NEXT:    orr x7, x6, x1
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x2, x2, #0x1
; ARM64-NEXT:    lsl x1, x1, #1
; ARM64-NEXT:    lsl x2, x2, #1
; ARM64-NEXT:    bic x1, x7, x1
; ARM64-NEXT:    orr x6, x1, x2
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x3, x3, #0x1
; ARM64-NEXT:    lsl x1, x1, #2
; ARM64-NEXT:    lsl x3, x3, #2
; ARM64-NEXT:    bic x1, x6, x1
; ARM64-NEXT:    orr x2, x1, x3
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x4, x4, #0x1
; ARM64-NEXT:    lsl x1, x1, #3
; ARM64-NEXT:    lsl x4, x4, #3
; ARM64-NEXT:    bic x1, x2, x1
; ARM64-NEXT:    orr x2, x1, x4
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x5, x5, #0x1
; ARM64-NEXT:    lsl x1, x1, #4
; ARM64-NEXT:    lsl x5, x5, #4
; ARM64-NEXT:    bic x1, x2, x1
; ARM64-NEXT:    orr x2, x1, x5
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r0 = insertelement <5 x i1> poison, i1 %e0, i32 0
  %r1 = insertelement <5 x i1> %r0, i1 %e1, i32 1
  %r2 = insertelement <5 x i1> %r1, i1 %e2, i32 2
  %r3 = insertelement <5 x i1> %r2, i1 %e3, i32 3
  %r4 = insertelement <5 x i1> %r3, i1 %e4, i32 4
  store <5 x i1> %r4, ptr %p
  ret void
}

define void @ins_v5i1_dyn(ptr %p, i1 %e, i32 %i) {
; X64-LABEL: <ins_v5i1_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, edx
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov byte ptr [rdi], sil
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i1_dyn>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w3, [x0]
; ARM64-NEXT:    mov w4, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsl x4, x4, x2
; ARM64-NEXT:    lsl x1, x1, x2
; ARM64-NEXT:    bic x4, x3, x4
; ARM64-NEXT:    orr x2, x4, x1
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <5 x i1>, ptr %p
  %r = insertelement <5 x i1> %v, i1 %e, i32 %i
  store <5 x i1> %r, ptr %p
  ret void
}

define void @ins_v16i1_0(ptr %p, i1 %e) {
; X64-LABEL: <ins_v16i1_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov word ptr [rdi], si
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i1_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w2, [x0]
; ARM64-NEXT:    mov w3, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsr x3, x3, #0
; ARM64-NEXT:    lsr x1, x1, #0
; ARM64-NEXT:    bic x3, x2, x3
; ARM64-NEXT:    orr x2, x3, x1
; ARM64-NEXT:    strh w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <16 x i1>, ptr %p
  %r = insertelement <16 x i1> %v, i1 %e, i32 0
  store <16 x i1> %r, ptr %p
  ret void
}

define void @ins_v16i1_3(ptr %p, i1 %e) {
; X64-LABEL: <ins_v16i1_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    mov ecx, 0x3
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov word ptr [rdi], si
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i1_3>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w2, [x0]
; ARM64-NEXT:    mov w3, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsl x3, x3, #3
; ARM64-NEXT:    lsl x1, x1, #3
; ARM64-NEXT:    bic x3, x2, x3
; ARM64-NEXT:    orr x2, x3, x1
; ARM64-NEXT:    strh w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <16 x i1>, ptr %p
  %r = insertelement <16 x i1> %v, i1 %e, i32 3
  store <16 x i1> %r, ptr %p
  ret void
}

define void @ins_v16i1_chain(ptr %p, i1 %e0, i1 %e1, i1 %e2, i1 %e3, i1 %e4) {
; X64-LABEL: <ins_v16i1_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov byte ptr [rbp - 0x29], cl
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    btr rsi, rcx
; X64-NEXT:    mov edx, edx
; X64-NEXT:    shl rdx, cl
; X64-NEXT:    or rdx, rsi
; X64-NEXT:    mov ecx, 0x2
; X64-NEXT:    btr rdx, rcx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x29]
; X64-NEXT:    shl rax, cl
; X64-NEXT:    or rax, rdx
; X64-NEXT:    mov ecx, 0x3
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov r8d, r8d
; X64-NEXT:    shl r8, cl
; X64-NEXT:    or r8, rax
; X64-NEXT:    mov ecx, 0x4
; X64-NEXT:    btr r8, rcx
; X64-NEXT:    mov r9d, r9d
; X64-NEXT:    shl r9, cl
; X64-NEXT:    or r9, r8
; X64-NEXT:    mov word ptr [rdi], r9w
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i1_chain>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w6, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsr x6, x6, #0
; ARM64-NEXT:    lsr x1, x1, #0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    bic x6, x7, x6
; ARM64-NEXT:    orr x7, x6, x1
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x2, x2, #0x1
; ARM64-NEXT:    lsl x1, x1, #1
; ARM64-NEXT:    lsl x2, x2, #1
; ARM64-NEXT:    bic x1, x7, x1
; ARM64-NEXT:    orr x6, x1, x2
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x3, x3, #0x1
; ARM64-NEXT:    lsl x1, x1, #2
; ARM64-NEXT:    lsl x3, x3, #2
; ARM64-NEXT:    bic x1, x6, x1
; ARM64-NEXT:    orr x2, x1, x3
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x4, x4, #0x1
; ARM64-NEXT:    lsl x1, x1, #3
; ARM64-NEXT:    lsl x4, x4, #3
; ARM64-NEXT:    bic x1, x2, x1
; ARM64-NEXT:    orr x2, x1, x4
; ARM64-NEXT:    mov w1, #0x1 // =1
; ARM64-NEXT:    and x5, x5, #0x1
; ARM64-NEXT:    lsl x1, x1, #4
; ARM64-NEXT:    lsl x5, x5, #4
; ARM64-NEXT:    bic x1, x2, x1
; ARM64-NEXT:    orr x2, x1, x5
; ARM64-NEXT:    strh w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r0 = insertelement <16 x i1> poison, i1 %e0, i32 0
  %r1 = insertelement <16 x i1> %r0, i1 %e1, i32 1
  %r2 = insertelement <16 x i1> %r1, i1 %e2, i32 2
  %r3 = insertelement <16 x i1> %r2, i1 %e3, i32 3
  %r4 = insertelement <16 x i1> %r3, i1 %e4, i32 4
  store <16 x i1> %r4, ptr %p
  ret void
}

define void @ins_v16i1_dyn(ptr %p, i1 %e, i32 %i) {
; X64-LABEL: <ins_v16i1_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    mov ecx, edx
; X64-NEXT:    btr rax, rcx
; X64-NEXT:    mov esi, esi
; X64-NEXT:    shl rsi, cl
; X64-NEXT:    or rsi, rax
; X64-NEXT:    mov word ptr [rdi], si
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i1_dyn>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w3, [x0]
; ARM64-NEXT:    mov w4, #0x1 // =1
; ARM64-NEXT:    and x1, x1, #0x1
; ARM64-NEXT:    lsl x4, x4, x2
; ARM64-NEXT:    lsl x1, x1, x2
; ARM64-NEXT:    bic x4, x3, x4
; ARM64-NEXT:    orr x2, x4, x1
; ARM64-NEXT:    strh w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <16 x i1>, ptr %p
  %r = insertelement <16 x i1> %v, i1 %e, i32 %i
  store <16 x i1> %r, ptr %p
  ret void
}

define void @ins_v5i8_0(ptr %p, i8 %e) {
; X64-LABEL: <ins_v5i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx ecx, byte ptr [rdi + 0x1]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x2]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x3]
; X64-NEXT:    movzx r8d, byte ptr [rdi + 0x4]
; X64-NEXT:    mov byte ptr [rbp - 0x30], al
; X64-NEXT:    mov byte ptr [rbp - 0x30], sil
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x30]
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov byte ptr [rdi + 0x1], cl
; X64-NEXT:    mov byte ptr [rdi + 0x2], dl
; X64-NEXT:    mov byte ptr [rdi + 0x3], bl
; X64-NEXT:    mov byte ptr [rdi + 0x4], r8b
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i8_0>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldrb w3, [x0, #0x1]
; ARM64-NEXT:    ldrb w4, [x0, #0x2]
; ARM64-NEXT:    ldrb w5, [x0, #0x3]
; ARM64-NEXT:    ldrb w6, [x0, #0x4]
; ARM64-NEXT:    strb w2, [x29, #0xa0]
; ARM64-NEXT:    strb w1, [x29, #0xa0]
; ARM64-NEXT:    ldrb w1, [x29, #0xa0]
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    strb w3, [x0, #0x1]
; ARM64-NEXT:    strb w4, [x0, #0x2]
; ARM64-NEXT:    strb w5, [x0, #0x3]
; ARM64-NEXT:    strb w6, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %v = load <5 x i8>, ptr %p
  %r = insertelement <5 x i8> %v, i8 %e, i32 0
  store <5 x i8> %r, ptr %p
  ret void
}

define void @ins_v5i8_3(ptr %p, i8 %e) {
; X64-LABEL: <ins_v5i8_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx ecx, byte ptr [rdi + 0x1]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x2]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x3]
; X64-NEXT:    movzx r8d, byte ptr [rdi + 0x4]
; X64-NEXT:    mov byte ptr [rbp - 0x2d], bl
; X64-NEXT:    mov byte ptr [rbp - 0x2d], sil
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov byte ptr [rdi + 0x1], cl
; X64-NEXT:    mov byte ptr [rdi + 0x2], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2d]
; X64-NEXT:    mov byte ptr [rdi + 0x3], al
; X64-NEXT:    mov byte ptr [rdi + 0x4], r8b
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i8_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldrb w3, [x0, #0x1]
; ARM64-NEXT:    ldrb w4, [x0, #0x2]
; ARM64-NEXT:    ldrb w5, [x0, #0x3]
; ARM64-NEXT:    ldrb w6, [x0, #0x4]
; ARM64-NEXT:    strb w5, [x29, #0xa3]
; ARM64-NEXT:    strb w1, [x29, #0xa3]
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    strb w3, [x0, #0x1]
; ARM64-NEXT:    strb w4, [x0, #0x2]
; ARM64-NEXT:    ldrb w1, [x29, #0xa3]
; ARM64-NEXT:    strb w1, [x0, #0x3]
; ARM64-NEXT:    strb w6, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %v = load <5 x i8>, ptr %p
  %r = insertelement <5 x i8> %v, i8 %e, i32 3
  store <5 x i8> %r, ptr %p
  ret void
}

define void @ins_v5i8_chain(ptr %p, i8 %e0, i8 %e1, i8 %e2, i8 %e3, i8 %e4) {
; X64-LABEL: <ins_v5i8_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    mov r10d, 0x0
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov byte ptr [rbp - 0x30], al
; X64-NEXT:    mov byte ptr [rbp - 0x30], sil
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x30]
; X64-NEXT:    mov byte ptr [rbp - 0x2f], bl
; X64-NEXT:    mov byte ptr [rbp - 0x2f], dl
; X64-NEXT:    movzx edx, byte ptr [rbp - 0x2f]
; X64-NEXT:    mov byte ptr [rbp - 0x2e], r10b
; X64-NEXT:    mov byte ptr [rbp - 0x2e], cl
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x2e]
; X64-NEXT:    mov byte ptr [rbp - 0x2d], r11b
; X64-NEXT:    mov byte ptr [rbp - 0x2d], r8b
; X64-NEXT:    movzx ebx, byte ptr [rbp - 0x2d]
; X64-NEXT:    mov byte ptr [rbp - 0x2c], r12b
; X64-NEXT:    mov byte ptr [rbp - 0x2c], r9b
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov byte ptr [rdi + 0x1], dl
; X64-NEXT:    mov byte ptr [rdi + 0x2], cl
; X64-NEXT:    mov byte ptr [rdi + 0x3], bl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2c]
; X64-NEXT:    mov byte ptr [rdi + 0x4], al
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i8_chain>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w10, #0x0 // =0
; ARM64-NEXT:    strb w6, [x29, #0xa0]
; ARM64-NEXT:    strb w1, [x29, #0xa0]
; ARM64-NEXT:    ldrb w1, [x29, #0xa0]
; ARM64-NEXT:    strb w7, [x29, #0xa1]
; ARM64-NEXT:    strb w2, [x29, #0xa1]
; ARM64-NEXT:    ldrb w2, [x29, #0xa1]
; ARM64-NEXT:    strb w8, [x29, #0xa2]
; ARM64-NEXT:    strb w3, [x29, #0xa2]
; ARM64-NEXT:    ldrb w3, [x29, #0xa2]
; ARM64-NEXT:    strb w9, [x29, #0xa3]
; ARM64-NEXT:    strb w4, [x29, #0xa3]
; ARM64-NEXT:    ldrb w4, [x29, #0xa3]
; ARM64-NEXT:    strb w10, [x29, #0xa4]
; ARM64-NEXT:    strb w5, [x29, #0xa4]
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    strb w2, [x0, #0x1]
; ARM64-NEXT:    strb w3, [x0, #0x2]
; ARM64-NEXT:    strb w4, [x0, #0x3]
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    strb w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r0 = insertelement <5 x i8> poison, i8 %e0, i32 0
  %r1 = insertelement <5 x i8> %r0, i8 %e1, i32 1
  %r2 = insertelement <5 x i8> %r1, i8 %e2, i32 2
  %r3 = insertelement <5 x i8> %r2, i8 %e3, i32 3
  %r4 = insertelement <5 x i8> %r3, i8 %e4, i32 4
  store <5 x i8> %r4, ptr %p
  ret void
}

define void @ins_v5i8_dyn(ptr %p, i8 %e, i32 %i) {
; X64-LABEL: <ins_v5i8_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx ecx, byte ptr [rdi + 0x1]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x2]
; X64-NEXT:    movzx r8d, byte ptr [rdi + 0x3]
; X64-NEXT:    movzx r9d, byte ptr [rdi + 0x4]
; X64-NEXT:    mov byte ptr [rbp - 0x30], al
; X64-NEXT:    mov byte ptr [rbp - 0x2f], cl
; X64-NEXT:    mov byte ptr [rbp - 0x2e], bl
; X64-NEXT:    mov byte ptr [rbp - 0x2d], r8b
; X64-NEXT:    mov byte ptr [rbp - 0x2c], r9b
; X64-NEXT:    mov dword ptr [rbp - 0x34], edx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov ecx, 0x5
; X64-NEXT:    mov ebx, dword ptr [rbp - 0x34]
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    div rcx
; X64-NEXT:    mov byte ptr [rbp + rdx - 0x30], sil
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x30]
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2f]
; X64-NEXT:    mov byte ptr [rdi + 0x1], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2e]
; X64-NEXT:    mov byte ptr [rdi + 0x2], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2d]
; X64-NEXT:    mov byte ptr [rdi + 0x3], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2c]
; X64-NEXT:    mov byte ptr [rdi + 0x4], al
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v5i8_dyn>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w3, [x0]
; ARM64-NEXT:    ldrb w4, [x0, #0x1]
; ARM64-NEXT:    ldrb w5, [x0, #0x2]
; ARM64-NEXT:    ldrb w6, [x0, #0x3]
; ARM64-NEXT:    ldrb w7, [x0, #0x4]
; ARM64-NEXT:    strb w3, [x29, #0xa0]
; ARM64-NEXT:    strb w4, [x29, #0xa1]
; ARM64-NEXT:    strb w5, [x29, #0xa2]
; ARM64-NEXT:    strb w6, [x29, #0xa3]
; ARM64-NEXT:    strb w7, [x29, #0xa4]
; ARM64-NEXT:    mov x3, #0x5 // =5
; ARM64-NEXT:    udiv x4, x2, x3
; ARM64-NEXT:    msub x3, x4, x3, x2
; ARM64-NEXT:    add x3, x29, x3
; ARM64-NEXT:    strb w1, [x3, #0xa0]
; ARM64-NEXT:    ldrb w1, [x29, #0xa0]
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    strb w1, [x0, #0x1]
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    strb w1, [x0, #0x2]
; ARM64-NEXT:    ldrb w1, [x29, #0xa3]
; ARM64-NEXT:    strb w1, [x0, #0x3]
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    strb w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %v = load <5 x i8>, ptr %p
  %r = insertelement <5 x i8> %v, i8 %e, i32 %i
  store <5 x i8> %r, ptr %p
  ret void
}

define <16 x i8> @ins_v16i8_0(<16 x i8> %v, i8 %e) {
; X64-LABEL: <ins_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x40], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.b[0], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 0
  ret <16 x i8> %r
}

define <16 x i8> @ins_v16i8_11(<16 x i8> %v, i8 %e) {
; X64-LABEL: <ins_v16i8_11>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x35], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i8_11>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.b[11], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 11
  ret <16 x i8> %r
}

define <16 x i8> @ins_v16i8_dyn(<16 x i8> %v, i8 %e, i32 %i) {
; X64-LABEL: <ins_v16i8_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    and rsi, 0xf
; X64-NEXT:    mov byte ptr [rbp + rsi - 0x40], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v16i8_dyn>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xa0]
; ARM64-NEXT:    and x1, x1, #0xf
; ARM64-NEXT:    add x1, x29, x1
; ARM64-NEXT:    strb w0, [x1, #0xa0]
; ARM64-NEXT:    ldr q0, [x29, #0xa0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 %i
  ret <16 x i8> %r
}

define void @ins_v32i8_0(ptr %p, i8 %e) {
; X64-LABEL: <ins_v32i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movups xmm0, xmmword ptr [rdi]
; X64-NEXT:    movups xmm1, xmmword ptr [rdi + 0x10]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x50], sil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v32i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr q0, [x0]
; ARM64-NEXT:    ldr q1, [x0, #0x10]
; ARM64-NEXT:    mov v0.b[0], w1
; ARM64-NEXT:    str q0, [x0]
; ARM64-NEXT:    str q1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <32 x i8>, ptr %p
  %r = insertelement <32 x i8> %v, i8 %e, i32 0
  store <32 x i8> %r, ptr %p
  ret void
}

define void @ins_v32i8_23(ptr %p, i8 %e) {
; X64-LABEL: <ins_v32i8_23>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movups xmm0, xmmword ptr [rdi]
; X64-NEXT:    movups xmm1, xmmword ptr [rdi + 0x10]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm1
; X64-NEXT:    mov byte ptr [rbp - 0x39], sil
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm0
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v32i8_23>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr q0, [x0]
; ARM64-NEXT:    ldr q1, [x0, #0x10]
; ARM64-NEXT:    mov v1.b[7], w1
; ARM64-NEXT:    str q0, [x0]
; ARM64-NEXT:    str q1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %v = load <32 x i8>, ptr %p
  %r = insertelement <32 x i8> %v, i8 %e, i32 23
  store <32 x i8> %r, ptr %p
  ret void
}

define void @ins_v32i8_chain(ptr %p, i8 %e0, i8 %e1, i8 %e2, i8 %e3, i8 %e4) {
; X64-LABEL: <ins_v32i8_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    pxor xmm1, xmm1
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x50], sil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x4f], dl
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x4e], cl
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x4d], r8b
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x4c], r9b
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v32i8_chain>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v0.16b, #0x0
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    mov v0.b[0], w1
; ARM64-NEXT:    mov v0.b[1], w2
; ARM64-NEXT:    mov v0.b[2], w3
; ARM64-NEXT:    mov v0.b[3], w4
; ARM64-NEXT:    mov v0.b[4], w5
; ARM64-NEXT:    str q0, [x0]
; ARM64-NEXT:    str q1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r0 = insertelement <32 x i8> poison, i8 %e0, i32 0
  %r1 = insertelement <32 x i8> %r0, i8 %e1, i32 1
  %r2 = insertelement <32 x i8> %r1, i8 %e2, i32 2
  %r3 = insertelement <32 x i8> %r2, i8 %e3, i32 3
  %r4 = insertelement <32 x i8> %r3, i8 %e4, i32 4
  store <32 x i8> %r4, ptr %p
  ret void
}

define void @ins_v32i8_dyn(ptr %p, i8 %e, i32 %i) {
; X64-LABEL: <ins_v32i8_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movups xmm0, xmmword ptr [rdi]
; X64-NEXT:    movups xmm1, xmmword ptr [rdi + 0x10]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm1
; X64-NEXT:    and rdx, 0x1f
; X64-NEXT:    mov byte ptr [rbp + rdx - 0x50], sil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm0
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v32i8_dyn>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr q0, [x0]
; ARM64-NEXT:    ldr q1, [x0, #0x10]
; ARM64-NEXT:    str q0, [x29, #0xa0]
; ARM64-NEXT:    str q1, [x29, #0xb0]
; ARM64-NEXT:    and x2, x2, #0x1f
; ARM64-NEXT:    add x2, x29, x2
; ARM64-NEXT:    strb w1, [x2, #0xa0]
; ARM64-NEXT:    ldr q0, [x29, #0xa0]
; ARM64-NEXT:    str q0, [x0]
; ARM64-NEXT:    ldr q0, [x29, #0xb0]
; ARM64-NEXT:    str q0, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %v = load <32 x i8>, ptr %p
  %r = insertelement <32 x i8> %v, i8 %e, i32 %i
  store <32 x i8> %r, ptr %p
  ret void
}

define <4 x i32> @ins_v4i32_0(<4 x i32> %v, i32 %e) {
; X64-LABEL: <ins_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x40], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v4i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.s[0], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 0
  ret <4 x i32> %r
}

define <4 x i32> @ins_v4i32_3(<4 x i32> %v, i32 %e) {
; X64-LABEL: <ins_v4i32_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x34], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v4i32_3>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.s[3], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 3
  ret <4 x i32> %r
}

define <4 x i32> @ins_v4i32_chain(i32 %a, i32 %b, i32 %c, i32 %d) {
; X64-LABEL: <ins_v4i32_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x40], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x3c], esi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x38], edx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x34], ecx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v4i32_chain>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v0.16b, #0x0
; ARM64-NEXT:    mov v0.s[0], w0
; ARM64-NEXT:    mov v0.s[1], w1
; ARM64-NEXT:    mov v0.s[2], w2
; ARM64-NEXT:    mov v0.s[3], w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r0 = insertelement <4 x i32> poison, i32 %a, i32 0
  %r1 = insertelement <4 x i32> %r0, i32 %b, i32 1
  %r2 = insertelement <4 x i32> %r1, i32 %c, i32 2
  %r3 = insertelement <4 x i32> %r2, i32 %d, i32 3
  ret <4 x i32> %r3
}

define <4 x i32> @ins_v4i32_dyn(<4 x i32> %v, i32 %e, i32 %i) {
; X64-LABEL: <ins_v4i32_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    and rsi, 0x3
; X64-NEXT:    mov dword ptr [rbp + 4*rsi - 0x40], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v4i32_dyn>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xa0]
; ARM64-NEXT:    and x1, x1, #0x3
; ARM64-NEXT:    add x1, x29, x1, lsl #2
; ARM64-NEXT:    str w0, [x1, #0xa0]
; ARM64-NEXT:    ldr q0, [x29, #0xa0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 %i
  ret <4 x i32> %r
}

define <2 x double> @ins_v2f64_0(<2 x double> %v, double %e) {
; X64-LABEL: <ins_v2f64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    movsd qword ptr [rbp - 0x40], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v2f64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.d[0], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 0
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_1(<2 x double> %v, double %e) {
; X64-LABEL: <ins_v2f64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    movsd qword ptr [rbp - 0x38], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v2f64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.d[1], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 1
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_dyn(<2 x double> %v, double %e, i32 %i) {
; X64-LABEL: <ins_v2f64_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    and rdi, 0x1
; X64-NEXT:    movsd qword ptr [rbp + 8*rdi - 0x40], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v2f64_dyn>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xa0]
; ARM64-NEXT:    and x0, x0, #0x1
; ARM64-NEXT:    add x0, x29, x0, lsl #3
; ARM64-NEXT:    str d1, [x0, #0xa0]
; ARM64-NEXT:    ldr q0, [x29, #0xa0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 %i
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_const(<2 x double> %v) {
; X64-LABEL: <ins_v2f64_const>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    movabs rax, 0x3ff0000000000000
; X64-NEXT:    movq xmm0, rax
; X64-NEXT:    movsd qword ptr [rbp - 0x38], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v2f64_const>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov d1, #1.00000000
; ARM64-NEXT:    mov v0.d[1], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double 1.0, i32 1
  ret <2 x double> %r
}

define <2 x float> @ins_v2f32_const_nosalvage(<2 x float> %v) {
; X64-LABEL: <ins_v2f32_const_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:  <L0>:
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x30]
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm0
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    movss dword ptr [rbp - 0x38], xmm0
; X64-NEXT:    jmp <L0>
;
; ARM64-LABEL: <ins_v2f32_const_nosalvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str d8, [sp, #0x10]
; ARM64-NEXT:    mov v8.16b, v0.16b
; ARM64-NEXT:    mov v0.16b, v8.16b
; ARM64-NEXT:    movi v1.8b, #0x0
; ARM64-NEXT:    mov v0.s[0], v1.s[0]
; ARM64-NEXT:    b 0xa94 <ins_v2f32_const_nosalvage+0x14>
  br label %loop

loop:
  %ie = insertelement <2 x float> %v, float 0.0, i64 0
  br label %loop
}
