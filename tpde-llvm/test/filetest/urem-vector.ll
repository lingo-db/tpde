; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define void @urem_v1i8(ptr %p, ptr %q) {
; X64-LABEL: <urem_v1i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx ecx, byte ptr [rsi]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rdi], dl
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v1i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldrb w3, [x1]
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    uxtb w3, w3
; ARM64-NEXT:    udiv w1, w2, w3
; ARM64-NEXT:    msub w3, w1, w3, w2
; ARM64-NEXT:    strb w3, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %a = load <1 x i8>, ptr %p
  %b = load <1 x i8>, ptr %q
  %r = urem <1 x i8> %a, %b
  store <1 x i8> %r, ptr %p
  ret void
}

define void @urem_v5i8(ptr %p, ptr %q) {
; X64-LABEL: <urem_v5i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx ecx, byte ptr [rdi + 0x1]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x2]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x3]
; X64-NEXT:    movzx r8d, byte ptr [rdi + 0x4]
; X64-NEXT:    movzx r9d, byte ptr [rsi]
; X64-NEXT:    movzx r10d, byte ptr [rsi + 0x1]
; X64-NEXT:    movzx r11d, byte ptr [rsi + 0x2]
; X64-NEXT:    movzx r12d, byte ptr [rsi + 0x3]
; X64-NEXT:    movzx r13d, byte ptr [rsi + 0x4]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx r9d, r9b
; X64-NEXT:    mov rsi, rax
; X64-NEXT:    mov byte ptr [rbp - 0x2e], dl
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, esi
; X64-NEXT:    div r9d
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    movzx r10d, r10b
; X64-NEXT:    mov byte ptr [rbp - 0x38], dl
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    div r10d
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2e]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx r11d, r11b
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    mov byte ptr [rbp - 0x37], dl
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    div r11d
; X64-NEXT:    movzx ebx, bl
; X64-NEXT:    movzx r12d, r12b
; X64-NEXT:    mov byte ptr [rbp - 0x36], dl
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div r12d
; X64-NEXT:    movzx r8d, r8b
; X64-NEXT:    movzx r13d, r13b
; X64-NEXT:    mov byte ptr [rbp - 0x35], dl
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, r8d
; X64-NEXT:    div r13d
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x38]
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x37]
; X64-NEXT:    mov byte ptr [rdi + 0x1], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x36]
; X64-NEXT:    mov byte ptr [rdi + 0x2], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x35]
; X64-NEXT:    mov byte ptr [rdi + 0x3], al
; X64-NEXT:    mov byte ptr [rdi + 0x4], dl
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v5i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldrb w3, [x0, #0x1]
; ARM64-NEXT:    ldrb w4, [x0, #0x2]
; ARM64-NEXT:    ldrb w5, [x0, #0x3]
; ARM64-NEXT:    ldrb w6, [x0, #0x4]
; ARM64-NEXT:    ldrb w7, [x1]
; ARM64-NEXT:    ldrb w8, [x1, #0x1]
; ARM64-NEXT:    ldrb w9, [x1, #0x2]
; ARM64-NEXT:    ldrb w10, [x1, #0x3]
; ARM64-NEXT:    ldrb w11, [x1, #0x4]
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    uxtb w7, w7
; ARM64-NEXT:    udiv w1, w2, w7
; ARM64-NEXT:    msub w7, w1, w7, w2
; ARM64-NEXT:    uxtb w3, w3
; ARM64-NEXT:    uxtb w8, w8
; ARM64-NEXT:    udiv w1, w3, w8
; ARM64-NEXT:    msub w8, w1, w8, w3
; ARM64-NEXT:    uxtb w4, w4
; ARM64-NEXT:    uxtb w9, w9
; ARM64-NEXT:    udiv w1, w4, w9
; ARM64-NEXT:    msub w9, w1, w9, w4
; ARM64-NEXT:    uxtb w5, w5
; ARM64-NEXT:    uxtb w10, w10
; ARM64-NEXT:    udiv w1, w5, w10
; ARM64-NEXT:    msub w10, w1, w10, w5
; ARM64-NEXT:    uxtb w6, w6
; ARM64-NEXT:    uxtb w11, w11
; ARM64-NEXT:    udiv w1, w6, w11
; ARM64-NEXT:    msub w11, w1, w11, w6
; ARM64-NEXT:    strb w7, [x0]
; ARM64-NEXT:    strb w8, [x0, #0x1]
; ARM64-NEXT:    strb w9, [x0, #0x2]
; ARM64-NEXT:    strb w10, [x0, #0x3]
; ARM64-NEXT:    strb w11, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %a = load <5 x i8>, ptr %p
  %b = load <5 x i8>, ptr %q
  %r = urem <5 x i8> %a, %b
  store <5 x i8> %r, ptr %p
  ret void
}

define <8 x i8> @urem_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <urem_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x30]
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm1
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x38]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x40], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2f]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x37]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3f], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2e]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x36]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3e], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2d]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x35]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3d], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2c]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x34]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3c], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2b]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x33]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3b], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x2a]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x32]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x3a], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x29]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x31]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x39], dl
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v8i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umov w0, v0.b[0]
; ARM64-NEXT:    umov w1, v1.b[0]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[0], w1
; ARM64-NEXT:    umov w0, v0.b[1]
; ARM64-NEXT:    umov w1, v1.b[1]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[1], w1
; ARM64-NEXT:    umov w0, v0.b[2]
; ARM64-NEXT:    umov w1, v1.b[2]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[2], w1
; ARM64-NEXT:    umov w0, v0.b[3]
; ARM64-NEXT:    umov w1, v1.b[3]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[3], w1
; ARM64-NEXT:    umov w0, v0.b[4]
; ARM64-NEXT:    umov w1, v1.b[4]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[4], w1
; ARM64-NEXT:    umov w0, v0.b[5]
; ARM64-NEXT:    umov w1, v1.b[5]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[5], w1
; ARM64-NEXT:    umov w0, v0.b[6]
; ARM64-NEXT:    umov w1, v1.b[6]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[6], w1
; ARM64-NEXT:    umov w0, v0.b[7]
; ARM64-NEXT:    umov w1, v1.b[7]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[7], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <16 x i8> @urem_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <urem_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm1
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x50]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x60], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3f]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4f]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5f], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3e]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4e]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5e], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3d]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4d]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5d], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3c]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4c]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5c], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3b]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4b]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5b], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3a]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x4a]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x5a], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x39]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x49]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x59], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x38]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x48]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x58], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x37]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x47]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x57], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x36]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x46]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x56], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x35]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x45]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x55], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x34]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x44]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x54], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x33]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x43]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x53], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x32]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x42]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x52], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x31]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x41]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x51], dl
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v16i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umov w0, v0.b[0]
; ARM64-NEXT:    umov w1, v1.b[0]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[0], w1
; ARM64-NEXT:    umov w0, v0.b[1]
; ARM64-NEXT:    umov w1, v1.b[1]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[1], w1
; ARM64-NEXT:    umov w0, v0.b[2]
; ARM64-NEXT:    umov w1, v1.b[2]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[2], w1
; ARM64-NEXT:    umov w0, v0.b[3]
; ARM64-NEXT:    umov w1, v1.b[3]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[3], w1
; ARM64-NEXT:    umov w0, v0.b[4]
; ARM64-NEXT:    umov w1, v1.b[4]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[4], w1
; ARM64-NEXT:    umov w0, v0.b[5]
; ARM64-NEXT:    umov w1, v1.b[5]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[5], w1
; ARM64-NEXT:    umov w0, v0.b[6]
; ARM64-NEXT:    umov w1, v1.b[6]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[6], w1
; ARM64-NEXT:    umov w0, v0.b[7]
; ARM64-NEXT:    umov w1, v1.b[7]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[7], w1
; ARM64-NEXT:    umov w0, v0.b[8]
; ARM64-NEXT:    umov w1, v1.b[8]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[8], w1
; ARM64-NEXT:    umov w0, v0.b[9]
; ARM64-NEXT:    umov w1, v1.b[9]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[9], w1
; ARM64-NEXT:    umov w0, v0.b[10]
; ARM64-NEXT:    umov w1, v1.b[10]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[10], w1
; ARM64-NEXT:    umov w0, v0.b[11]
; ARM64-NEXT:    umov w1, v1.b[11]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[11], w1
; ARM64-NEXT:    umov w0, v0.b[12]
; ARM64-NEXT:    umov w1, v1.b[12]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[12], w1
; ARM64-NEXT:    umov w0, v0.b[13]
; ARM64-NEXT:    umov w1, v1.b[13]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[13], w1
; ARM64-NEXT:    umov w0, v0.b[14]
; ARM64-NEXT:    umov w1, v1.b[14]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[14], w1
; ARM64-NEXT:    umov w0, v0.b[15]
; ARM64-NEXT:    umov w1, v1.b[15]
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.b[15], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <16 x i8> %a, %b
  ret <16 x i8> %r
}

define void @urem_v32i8(ptr %p, ptr %q) {
; X64-LABEL: <urem_v32i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x88
; X64-NEXT:    movups xmm0, xmmword ptr [rdi]
; X64-NEXT:    movups xmm1, xmmword ptr [rdi + 0x10]
; X64-NEXT:    movups xmm2, xmmword ptr [rsi]
; X64-NEXT:    movups xmm3, xmmword ptr [rsi + 0x10]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x70], xmm2
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x70]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x90], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4f]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6f]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8f], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4e]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6e]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8e], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4d]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6d]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8d], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4c]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6c]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8c], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4b]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6b]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8b], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x4a]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x6a]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x8a], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x49]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x69]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x89], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x48]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x68]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x88], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x47]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x67]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x87], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x46]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x66]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x86], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x45]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x65]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x85], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x44]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x64]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x84], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x43]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x63]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x83], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x42]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x62]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x82], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x41]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x61]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x81], dl
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm1
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm3
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x60]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x80], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3f]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5f]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7f], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3e]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5e]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7e], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3d]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5d]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7d], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3c]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5c]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7c], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3b]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5b]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7b], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x3a]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x5a]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x7a], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x39]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x59]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x79], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x38]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x58]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x78], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x37]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x57]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x77], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x36]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x56]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x76], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x35]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x55]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x75], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x34]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x54]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x74], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x33]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x53]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x73], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x32]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x52]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x72], dl
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x31]
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x51]
; X64-NEXT:    movzx eax, al
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov byte ptr [rbp - 0x71], dl
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x90]
; X64-NEXT:    movups xmmword ptr [rdi], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x80]
; X64-NEXT:    movups xmmword ptr [rdi + 0x10], xmm0
; X64-NEXT:    add rsp, 0x88
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v32i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr q0, [x0]
; ARM64-NEXT:    ldr q1, [x0, #0x10]
; ARM64-NEXT:    ldr q2, [x1]
; ARM64-NEXT:    ldr q3, [x1, #0x10]
; ARM64-NEXT:    umov w1, v0.b[0]
; ARM64-NEXT:    umov w2, v2.b[0]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[0], w2
; ARM64-NEXT:    umov w1, v0.b[1]
; ARM64-NEXT:    umov w2, v2.b[1]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[1], w2
; ARM64-NEXT:    umov w1, v0.b[2]
; ARM64-NEXT:    umov w2, v2.b[2]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[2], w2
; ARM64-NEXT:    umov w1, v0.b[3]
; ARM64-NEXT:    umov w2, v2.b[3]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[3], w2
; ARM64-NEXT:    umov w1, v0.b[4]
; ARM64-NEXT:    umov w2, v2.b[4]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[4], w2
; ARM64-NEXT:    umov w1, v0.b[5]
; ARM64-NEXT:    umov w2, v2.b[5]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[5], w2
; ARM64-NEXT:    umov w1, v0.b[6]
; ARM64-NEXT:    umov w2, v2.b[6]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[6], w2
; ARM64-NEXT:    umov w1, v0.b[7]
; ARM64-NEXT:    umov w2, v2.b[7]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[7], w2
; ARM64-NEXT:    umov w1, v0.b[8]
; ARM64-NEXT:    umov w2, v2.b[8]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[8], w2
; ARM64-NEXT:    umov w1, v0.b[9]
; ARM64-NEXT:    umov w2, v2.b[9]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[9], w2
; ARM64-NEXT:    umov w1, v0.b[10]
; ARM64-NEXT:    umov w2, v2.b[10]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[10], w2
; ARM64-NEXT:    umov w1, v0.b[11]
; ARM64-NEXT:    umov w2, v2.b[11]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[11], w2
; ARM64-NEXT:    umov w1, v0.b[12]
; ARM64-NEXT:    umov w2, v2.b[12]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[12], w2
; ARM64-NEXT:    umov w1, v0.b[13]
; ARM64-NEXT:    umov w2, v2.b[13]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[13], w2
; ARM64-NEXT:    umov w1, v0.b[14]
; ARM64-NEXT:    umov w2, v2.b[14]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[14], w2
; ARM64-NEXT:    umov w1, v0.b[15]
; ARM64-NEXT:    umov w2, v2.b[15]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v4.b[15], w2
; ARM64-NEXT:    umov w1, v1.b[0]
; ARM64-NEXT:    umov w2, v3.b[0]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[0], w2
; ARM64-NEXT:    umov w1, v1.b[1]
; ARM64-NEXT:    umov w2, v3.b[1]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[1], w2
; ARM64-NEXT:    umov w1, v1.b[2]
; ARM64-NEXT:    umov w2, v3.b[2]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[2], w2
; ARM64-NEXT:    umov w1, v1.b[3]
; ARM64-NEXT:    umov w2, v3.b[3]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[3], w2
; ARM64-NEXT:    umov w1, v1.b[4]
; ARM64-NEXT:    umov w2, v3.b[4]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[4], w2
; ARM64-NEXT:    umov w1, v1.b[5]
; ARM64-NEXT:    umov w2, v3.b[5]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[5], w2
; ARM64-NEXT:    umov w1, v1.b[6]
; ARM64-NEXT:    umov w2, v3.b[6]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[6], w2
; ARM64-NEXT:    umov w1, v1.b[7]
; ARM64-NEXT:    umov w2, v3.b[7]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[7], w2
; ARM64-NEXT:    umov w1, v1.b[8]
; ARM64-NEXT:    umov w2, v3.b[8]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[8], w2
; ARM64-NEXT:    umov w1, v1.b[9]
; ARM64-NEXT:    umov w2, v3.b[9]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[9], w2
; ARM64-NEXT:    umov w1, v1.b[10]
; ARM64-NEXT:    umov w2, v3.b[10]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[10], w2
; ARM64-NEXT:    umov w1, v1.b[11]
; ARM64-NEXT:    umov w2, v3.b[11]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[11], w2
; ARM64-NEXT:    umov w1, v1.b[12]
; ARM64-NEXT:    umov w2, v3.b[12]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[12], w2
; ARM64-NEXT:    umov w1, v1.b[13]
; ARM64-NEXT:    umov w2, v3.b[13]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[13], w2
; ARM64-NEXT:    umov w1, v1.b[14]
; ARM64-NEXT:    umov w2, v3.b[14]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[14], w2
; ARM64-NEXT:    umov w1, v1.b[15]
; ARM64-NEXT:    umov w2, v3.b[15]
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    uxtb w2, w2
; ARM64-NEXT:    udiv w3, w1, w2
; ARM64-NEXT:    msub w2, w3, w2, w1
; ARM64-NEXT:    mov v5.b[15], w2
; ARM64-NEXT:    str q4, [x0]
; ARM64-NEXT:    str q5, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %a = load <32 x i8>, ptr %p
  %b = load <32 x i8>, ptr %q
  %r = urem <32 x i8> %a, %b
  store <32 x i8> %r, ptr %p
  ret void
}

define <4 x i16> @urem_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <urem_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    movzx eax, word ptr [rbp - 0x30]
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm1
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x38]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x40], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x2e]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x36]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x3e], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x2c]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x34]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x3c], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x2a]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x32]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x3a], dx
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v4i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umov w0, v0.h[0]
; ARM64-NEXT:    umov w1, v1.h[0]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[0], w1
; ARM64-NEXT:    umov w0, v0.h[1]
; ARM64-NEXT:    umov w1, v1.h[1]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[1], w1
; ARM64-NEXT:    umov w0, v0.h[2]
; ARM64-NEXT:    umov w1, v1.h[2]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[2], w1
; ARM64-NEXT:    umov w0, v0.h[3]
; ARM64-NEXT:    umov w1, v1.h[3]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[3], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <8 x i16> @urem_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <urem_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    movzx eax, word ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm1
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x50]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x60], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x3e]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x4e]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x5e], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x3c]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x4c]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x5c], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x3a]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x4a]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x5a], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x38]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x48]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x58], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x36]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x46]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x56], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x34]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x44]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x54], dx
; X64-NEXT:    movzx eax, word ptr [rbp - 0x32]
; X64-NEXT:    movzx ecx, word ptr [rbp - 0x42]
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    movzx ecx, cx
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov word ptr [rbp - 0x52], dx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v8i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umov w0, v0.h[0]
; ARM64-NEXT:    umov w1, v1.h[0]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[0], w1
; ARM64-NEXT:    umov w0, v0.h[1]
; ARM64-NEXT:    umov w1, v1.h[1]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[1], w1
; ARM64-NEXT:    umov w0, v0.h[2]
; ARM64-NEXT:    umov w1, v1.h[2]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[2], w1
; ARM64-NEXT:    umov w0, v0.h[3]
; ARM64-NEXT:    umov w1, v1.h[3]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[3], w1
; ARM64-NEXT:    umov w0, v0.h[4]
; ARM64-NEXT:    umov w1, v1.h[4]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[4], w1
; ARM64-NEXT:    umov w0, v0.h[5]
; ARM64-NEXT:    umov w1, v1.h[5]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[5], w1
; ARM64-NEXT:    umov w0, v0.h[6]
; ARM64-NEXT:    umov w1, v1.h[6]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[6], w1
; ARM64-NEXT:    umov w0, v0.h[7]
; ARM64-NEXT:    umov w1, v1.h[7]
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.h[7], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <2 x i32> @urem_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <urem_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    mov eax, dword ptr [rbp - 0x30]
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm1
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x38]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x40], edx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x2c]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x34]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x3c], edx
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x40]
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v2i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, v0.s[0]
; ARM64-NEXT:    mov w1, v1.s[0]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[0], w1
; ARM64-NEXT:    mov w0, v0.s[1]
; ARM64-NEXT:    mov w1, v1.s[1]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[1], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <4 x i32> @urem_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <urem_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov eax, dword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm1
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x50]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x60], edx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x3c]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x4c]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x5c], edx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x38]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x48]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x58], edx
; X64-NEXT:    mov eax, dword ptr [rbp - 0x34]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x44]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    div ecx
; X64-NEXT:    mov dword ptr [rbp - 0x54], edx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v4i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, v0.s[0]
; ARM64-NEXT:    mov w1, v1.s[0]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[0], w1
; ARM64-NEXT:    mov w0, v0.s[1]
; ARM64-NEXT:    mov w1, v1.s[1]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[1], w1
; ARM64-NEXT:    mov w0, v0.s[2]
; ARM64-NEXT:    mov w1, v1.s[2]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[2], w1
; ARM64-NEXT:    mov w0, v0.s[3]
; ARM64-NEXT:    mov w1, v1.s[3]
; ARM64-NEXT:    udiv w2, w0, w1
; ARM64-NEXT:    msub w1, w2, w1, w0
; ARM64-NEXT:    mov v2.s[3], w1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <2 x i64> @urem_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <urem_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    movapd xmmword ptr [rbp - 0x40], xmm0
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm1
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x50]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    div rcx
; X64-NEXT:    mov qword ptr [rbp - 0x60], rdx
; X64-NEXT:    mov rax, qword ptr [rbp - 0x38]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x48]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov rbx, rdx
; X64-NEXT:    xor edx, edx
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    div rcx
; X64-NEXT:    mov qword ptr [rbp - 0x58], rdx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <urem_v2i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, v0.d[0]
; ARM64-NEXT:    mov x1, v1.d[0]
; ARM64-NEXT:    udiv x2, x0, x1
; ARM64-NEXT:    msub x1, x2, x1, x0
; ARM64-NEXT:    mov v2.d[0], x1
; ARM64-NEXT:    mov x0, v0.d[1]
; ARM64-NEXT:    mov x1, v1.d[1]
; ARM64-NEXT:    udiv x2, x0, x1
; ARM64-NEXT:    msub x1, x2, x1, x0
; ARM64-NEXT:    mov v2.d[1], x1
; ARM64-NEXT:    mov v0.16b, v2.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = urem <2 x i64> %a, %b
  ret <2 x i64> %r
}
