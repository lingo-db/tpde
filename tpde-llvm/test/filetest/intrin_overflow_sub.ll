; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

declare {i8, i1} @llvm.ssub.with.overflow.i8(i8, i8)
declare {i16, i1} @llvm.ssub.with.overflow.i16(i16, i16)
declare {i32, i1} @llvm.ssub.with.overflow.i32(i32, i32)
declare {i64, i1} @llvm.ssub.with.overflow.i64(i64, i64)
declare {i128, i1} @llvm.ssub.with.overflow.i128(i128, i128)

declare {i8, i1} @llvm.usub.with.overflow.i8(i8, i8)
declare {i16, i1} @llvm.usub.with.overflow.i16(i16, i16)
declare {i32, i1} @llvm.usub.with.overflow.i32(i32, i32)
declare {i64, i1} @llvm.usub.with.overflow.i64(i64, i64)
declare {i128, i1} @llvm.usub.with.overflow.i128(i128, i128)

define i8 @usub_i8_0(i8 %0, i8 %1) {
; X64-LABEL: <usub_i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub dil, sil
; X64-NEXT:    setb al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xff
; ARM64-NEXT:    sub w0, w0, w1, uxtb
; ARM64-NEXT:    tst w0, #0xffffff00
; ARM64-NEXT:    and x1, x0, #0xff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i8, i1} @llvm.usub.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 0
  ret i8 %3
}

define i1 @usub_i8_1(i8 %0, i8 %1) {
; X64-LABEL: <usub_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub dil, sil
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xff
; ARM64-NEXT:    sub w0, w0, w1, uxtb
; ARM64-NEXT:    tst w0, #0xffffff00
; ARM64-NEXT:    and x1, x0, #0xff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i8, i1} @llvm.usub.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 1
  ret i1 %3
}

define i16 @usub_i16_0(i16 %0, i16 %1) {
; X64-LABEL: <usub_i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub di, si
; X64-NEXT:    setb al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xffff
; ARM64-NEXT:    sub w0, w0, w1, uxth
; ARM64-NEXT:    tst w0, #0xffff0000
; ARM64-NEXT:    and x1, x0, #0xffff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i16, i1} @llvm.usub.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 0
  ret i16 %3
}

define i1 @usub_i16_1(i16 %0, i16 %1) {
; X64-LABEL: <usub_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub di, si
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xffff
; ARM64-NEXT:    sub w0, w0, w1, uxth
; ARM64-NEXT:    tst w0, #0xffff0000
; ARM64-NEXT:    and x1, x0, #0xffff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i16, i1} @llvm.usub.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 1
  ret i1 %3
}

define i32 @usub_i32_0(i32 %0, i32 %1) {
; X64-LABEL: <usub_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub edi, esi
; X64-NEXT:    setb al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    cset w1, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i32, i1} @llvm.usub.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 0
  ret i32 %3
}

define i1 @usub_i32_1(i32 %0, i32 %1) {
; X64-LABEL: <usub_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub edi, esi
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    cset w1, lo
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i32, i1} @llvm.usub.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 1
  ret i1 %3
}

define i64 @usub_i64_0(i64 %0, i64 %1) {
; X64-LABEL: <usub_i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    setb al
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    cset w1, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i64, i1} @llvm.usub.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 0
  ret i64 %3
}

define i1 @usub_i64_1(i64 %0, i64 %1) {
; X64-LABEL: <usub_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    cset w1, lo
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i64, i1} @llvm.usub.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 1
  ret i1 %3
}

define i128 @usub_i128_0(i128 %0, i128 %1) {
; X64-LABEL: <usub_i128_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rdi, rdx
; X64-NEXT:    sbb rsi, rcx
; X64-NEXT:    setb al
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i128_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x4, x0, x2
; ARM64-NEXT:    sbcs x5, x1, x3
; ARM64-NEXT:    cset w6, lo
; ARM64-NEXT:    mov x0, x4
; ARM64-NEXT:    mov x1, x5
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i128, i1} @llvm.usub.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 0
  ret i128 %3
}

define i1 @usub_i128_1(i128 %0, i128 %1) {
; X64-LABEL: <usub_i128_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rdi, rdx
; X64-NEXT:    sbb rsi, rcx
; X64-NEXT:    setb al
; X64-NEXT:    movzx eax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_i128_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x4, x0, x2
; ARM64-NEXT:    sbcs x5, x1, x3
; ARM64-NEXT:    cset w6, lo
; ARM64-NEXT:    mov w0, w6
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i128, i1} @llvm.usub.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 1
  ret i1 %3
}



define i8 @ssub_i8_0(i8 %0, i8 %1) {
; X64-LABEL: <ssub_i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub dil, sil
; X64-NEXT:    seto al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    sub w0, w0, w1, sxtb
; ARM64-NEXT:    cmp w0, w0, sxtb
; ARM64-NEXT:    and x1, x0, #0xff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i8, i1} @llvm.ssub.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 0
  ret i8 %3
}

define i1 @ssub_i8_1(i8 %0, i8 %1) {
; X64-LABEL: <ssub_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub dil, sil
; X64-NEXT:    seto al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    sub w0, w0, w1, sxtb
; ARM64-NEXT:    cmp w0, w0, sxtb
; ARM64-NEXT:    and x1, x0, #0xff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i8, i1} @llvm.ssub.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 1
  ret i1 %3
}

define i16 @ssub_i16_0(i16 %0, i16 %1) {
; X64-LABEL: <ssub_i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub di, si
; X64-NEXT:    seto al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    sub w0, w0, w1, sxth
; ARM64-NEXT:    cmp w0, w0, sxth
; ARM64-NEXT:    and x1, x0, #0xffff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i16, i1} @llvm.ssub.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 0
  ret i16 %3
}

define i1 @ssub_i16_1(i16 %0, i16 %1) {
; X64-LABEL: <ssub_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub di, si
; X64-NEXT:    seto al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    sub w0, w0, w1, sxth
; ARM64-NEXT:    cmp w0, w0, sxth
; ARM64-NEXT:    and x1, x0, #0xffff
; ARM64-NEXT:    cset w2, ne
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i16, i1} @llvm.ssub.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 1
  ret i1 %3
}

define i32 @ssub_i32_0(i32 %0, i32 %1) {
; X64-LABEL: <ssub_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub edi, esi
; X64-NEXT:    seto al
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    cset w1, vs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i32, i1} @llvm.ssub.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 0
  ret i32 %3
}

define i1 @ssub_i32_1(i32 %0, i32 %1) {
; X64-LABEL: <ssub_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub edi, esi
; X64-NEXT:    seto al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    cset w1, vs
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i32, i1} @llvm.ssub.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 1
  ret i1 %3
}

define i64 @ssub_i64_0(i64 %0, i64 %1) {
; X64-LABEL: <ssub_i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    seto al
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    cset w1, vs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i64, i1} @llvm.ssub.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 0
  ret i64 %3
}

define i1 @ssub_i64_1(i64 %0, i64 %1) {
; X64-LABEL: <ssub_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    seto al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    cset w1, vs
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i64, i1} @llvm.ssub.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 1
  ret i1 %3
}

define i128 @ssub_i128_0(i128 %0, i128 %1) {
; X64-LABEL: <ssub_i128_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rdi, rdx
; X64-NEXT:    sbb rsi, rcx
; X64-NEXT:    seto al
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i128_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x4, x0, x2
; ARM64-NEXT:    sbcs x5, x1, x3
; ARM64-NEXT:    cset w6, vs
; ARM64-NEXT:    mov x0, x4
; ARM64-NEXT:    mov x1, x5
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i128, i1} @llvm.ssub.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 0
  ret i128 %3
}

define i1 @ssub_i128_1(i128 %0, i128 %1) {
; X64-LABEL: <ssub_i128_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rdi, rdx
; X64-NEXT:    sbb rsi, rcx
; X64-NEXT:    seto al
; X64-NEXT:    movzx eax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ssub_i128_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x4, x0, x2
; ARM64-NEXT:    sbcs x5, x1, x3
; ARM64-NEXT:    cset w6, vs
; ARM64-NEXT:    mov w0, w6
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = call {i128, i1} @llvm.ssub.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 1
  ret i1 %3
}
