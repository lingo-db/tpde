; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

declare i32 @__gxx_personality_v0(...)
declare i32 @mayThrow(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define i32 @invoke_manyargs() personality ptr @__gxx_personality_v0 {
; X64-LABEL: <invoke_manyargs>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov edi, 0x1
; X64-NEXT:    mov esi, 0x2
; X64-NEXT:    mov edx, 0x3
; X64-NEXT:    mov ecx, 0x4
; X64-NEXT:    mov r8d, 0x5
; X64-NEXT:    mov r9d, 0x6
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x7
; X64-NEXT:    mov dword ptr [rsp], eax
; X64-NEXT:    mov eax, 0x8
; X64-NEXT:    mov dword ptr [rsp + 0x8], eax
; X64-NEXT:    mov eax, 0x9
; X64-NEXT:    mov dword ptr [rsp + 0x10], eax
; X64-NEXT:    mov eax, 0xa
; X64-NEXT:    mov dword ptr [rsp + 0x18], eax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 mayThrow-0x4
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    mov rdi, rax
; X64-NEXT:    mov esi, edx
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 _Unwind_Resume-0x4
; X64-NEXT:    ud2
;
; ARM64-LABEL: <invoke_manyargs>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    mov x1, #0x2 // =2
; ARM64-NEXT:    mov x2, #0x3 // =3
; ARM64-NEXT:    mov x3, #0x4 // =4
; ARM64-NEXT:    mov x4, #0x5 // =5
; ARM64-NEXT:    mov x5, #0x6 // =6
; ARM64-NEXT:    mov x6, #0x7 // =7
; ARM64-NEXT:    mov x7, #0x8 // =8
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x8, #0x9 // =9
; ARM64-NEXT:    str w8, [sp]
; ARM64-NEXT:    mov x8, #0xa // =10
; ARM64-NEXT:    str w8, [sp, #0x8]
; ARM64-NEXT:    bl 0x64 <invoke_manyargs+0x44>
; ARM64-NEXT:     R_AARCH64_CALL26 mayThrow
; ARM64-NEXT:    add sp, sp, #0x10
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    bl 0xa4 <invoke_manyargs+0x84>
; ARM64-NEXT:     R_AARCH64_CALL26 _Unwind_Resume
; ARM64-NEXT:    brk #0x1
entry:
  %call = invoke i32 @mayThrow(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10)
          to label %invoke.cont unwind label %lpad

invoke.cont:
  ret i32 0

lpad:
  %0 = landingpad { ptr, i32 }
          cleanup
  resume { ptr, i32 } %0
}

define void @invoke_landingpad_phi() personality ptr @__gxx_personality_v0 {
; X64-LABEL: <invoke_landingpad_phi>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x2c], eax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:  <L3>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov ebx, eax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x28]
; X64-NEXT:    mov r12, rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    test al, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    cmove eax, ecx
; X64-NEXT:    mov r13d, eax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov ebx, ebx
; X64-NEXT:    mov r12, qword ptr [r12]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    shl eax, 0x0
; X64-NEXT:    mov ebx, eax
; X64-NEXT:    test r13d, r13d
; X64-NEXT:    setl al
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 foo-0x4
; X64-NEXT:    mov r12, rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x40], rcx
; X64-NEXT:    jmp <L2>
; X64-NEXT:  <L1>:
; X64-NEXT:    mov dword ptr [rbp - 0x2c], ebx
; X64-NEXT:    mov qword ptr [rbp - 0x38], r12
; X64-NEXT:    jmp <L3>
; X64-NEXT:  <L2>:
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:  <L4>:
; X64-NEXT:    call <L4>
; X64-NEXT:     R_X86_64_PLT32 _Unwind_Resume-0x4
; X64-NEXT:    ud2
;
; ARM64-LABEL: <invoke_landingpad_phi>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [x29, #0x10]
; ARM64-NEXT:    str x21, [x29, #0x20]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add w0, w0, #0x0
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x0, #0x28
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    tst w0, #0x1
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    csel w0, w0, w1, eq
; ARM64-NEXT:    mov w21, w0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str x0, [x29, #0xb0]
; ARM64-NEXT:    ubfx x19, x19, #0, #32
; ARM64-NEXT:    ldr x20, [x20]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    lsr w0, w0, #0
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    cmp w21, #0x0
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    bl 0x14c <invoke_landingpad_phi+0x8c>
; ARM64-NEXT:     R_AARCH64_CALL26 foo
; ARM64-NEXT:    mov x20, x0
; ARM64-NEXT:    b 0x164 <invoke_landingpad_phi+0xa4>
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    str x2, [x29, #0xb0]
; ARM64-NEXT:    b 0x170 <invoke_landingpad_phi+0xb0>
; ARM64-NEXT:    str w19, [x29, #0xa0]
; ARM64-NEXT:    str x20, [x29, #0xa8]
; ARM64-NEXT:    b 0xf0 <invoke_landingpad_phi+0x30>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    bl 0x178 <invoke_landingpad_phi+0xb8>
; ARM64-NEXT:     R_AARCH64_CALL26 _Unwind_Resume
; ARM64-NEXT:    brk #0x1
  br label %1

1:                                                ; preds = %17, %0
  %2 = phi i32 [ 0, %0 ], [ %14, %17 ]
  %3 = phi ptr [ null, %0 ], [ %16, %17 ]
  %4 = add i32 0, 0
  %5 = getelementptr i8, ptr null, i64 40
  %6 = select i1 false, i32 0, i32 0
  br label %8

7:                                                ; No predecessors!
  br label %8

8:                                                ; preds = %7, %1
  %9 = phi ptr [ null, %1 ], [ null, %7 ]
  %10 = zext i32 %4 to i64
  br label %12

11:                                               ; No predecessors!
  invoke void null(ptr null)
          to label %12 unwind label %18

12:                                               ; preds = %11, %8
  %13 = load ptr, ptr %5, align 8
  %14 = shl i32 0, 0
  %15 = icmp slt i32 %6, 0
  %16 = invoke ptr @foo(i64 0, i32 0)
          to label %17 unwind label %18

17:                                               ; preds = %12
  br label %1

18:                                               ; preds = %12, %11
  %19 = phi ptr [ null, %12 ], [ null, %11 ]
  %20 = landingpad { ptr, i32 }
          cleanup
  resume { ptr, i32 } zeroinitializer
}

declare ptr @foo()

@exception_type = external constant { ptr, ptr, i32, ptr }

define i32 @invoke_catch_symbol() personality ptr @__gxx_personality_v0 {
; X64-LABEL: <invoke_catch_symbol>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 _Znwm-0x4
; X64-NEXT:    jmp <L1>
; X64-NEXT:  <L1>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <invoke_catch_symbol>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    bl 0x1b4 <invoke_catch_symbol+0x14>
; ARM64-NEXT:     R_AARCH64_CALL26 _Znwm
; ARM64-NEXT:    b 0x1bc <invoke_catch_symbol+0x1c>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %i = invoke ptr @_Znwm(i64 0)
          to label %common.ret unwind label %unwind

common.ret:
  ret i32 0

unwind:
  %3 = landingpad { ptr, i32 }
          cleanup
          catch ptr @exception_type
  br label %common.ret
}

declare ptr @_Znwm()

declare ptr @fn_ptr_i64(i64)
define i32 @main(ptr %0, i64 %1) personality ptr @__gxx_personality_v0 {
; X64-LABEL: <main>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov r12, rsi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fn_ptr_i64-0x4
; X64-NEXT:    mov qword ptr [rbp - 0x30], rax
; X64-NEXT:    jmp <L1>
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rsp, [rbp - 0x10]
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:  <L1>:
; X64-NEXT:    mov rax, qword ptr [rbp - 0x30]
; X64-NEXT:    lea rax, [rax + 0x8]
; X64-NEXT:  <L2>:
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movzx eax, byte ptr [rbx + r12]
; X64-NEXT:    jmp <L2>
;
; ARM64-LABEL: <main>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x20, x1
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    bl 0x20c <main+0x1c>
; ARM64-NEXT:     R_AARCH64_CALL26 fn_ptr_i64
; ARM64-NEXT:    str x0, [x29, #0xa0]
; ARM64-NEXT:    b 0x250 <main+0x60>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x19, x20, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    ldr x0, [x29, #0xa0]
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x19, x20
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    b 0x258 <main+0x68>
  %3 = invoke ptr @fn_ptr_i64(i64 0)
          to label %6 unwind label %4

4:                                                ; preds = %2
  %5 = landingpad { ptr, i32 }
          cleanup
  ret i32 0

6:                                                ; preds = %2
  %7 = getelementptr i8, ptr %3, i64 8
  br label %8

8:                                                ; preds = %8, %6
  %9 = sext i32 0 to i64
  %10 = getelementptr [1048576 x i8], ptr %0, i64 0, i64 %1
  %11 = load i8, ptr %10, align 1
  br label %8
}
