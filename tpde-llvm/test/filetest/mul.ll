; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define void @mul_i8_1(i8 %0) {
; X64-LABEL: <mul_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i8 %0, 1
    ret void
}

define void @mul_i8_-1(i8 %0) {
; X64-LABEL: <mul_i8_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0xff
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i8_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0xff // =255
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i8 %0, -1
    ret void
}

define void @mul_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: <mul_i8_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul edi, esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i8_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i8 %0, %1
    ret void
}

define void @mul_i16_1(i16 %0) {
; X64-LABEL: <mul_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i16 %0, 1
    ret void
}

define void @mul_i16_-1(i16 %0) {
; X64-LABEL: <mul_i16_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0xffff
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i16_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0xffff // =65535
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i16 %0, -1
    ret void
}

define void @mul_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: <mul_i16_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul edi, esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i16_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i16 %0, %1
    ret void
}

define void @mul_i32_1(i32 %0) {
; X64-LABEL: <mul_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i32 %0, 1
    ret void
}

define void @mul_i32_-1(i32 %0) {
; X64-LABEL: <mul_i32_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0xffffffff
; X64-NEXT:    imul edi, eax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i32_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0xffffffff // =4294967295
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i32 %0, -1
    ret void
}

define void @mul_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: <mul_i32_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul edi, esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i32_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul w1, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i32 %0, %1
    ret void
}

define void @mul_i37_1(i37 %0) {
; X64-LABEL: <mul_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i37 %0, 1
    ret void
}

define void @mul_i37_-1(i37 %0) {
; X64-LABEL: <mul_i37_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i37_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1fffffffff // =137438953471
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i37 %0, -1
    ret void
}

define void @mul_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: <mul_i37_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rdi, rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i37_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i37 %0, %1
    ret void
}

define void @mul_i64_1(i64 %0) {
; X64-LABEL: <mul_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i64 %0, 1
    ret void
}

define void @mul_i64_-1(i64 %0) {
; X64-LABEL: <mul_i64_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, -0x1
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i64_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #-0x1 // =-1
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i64 %0, -1
    ret void
}

define void @mul_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: <mul_i64_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rdi, rsi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i64_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i64 %0, %1
    ret void
}

define void @mul_i128_1(i128 %0) {
; X64-LABEL: <mul_i128_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    imul rsi, rcx
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    madd x1, x1, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i128 %0, 1
    ret void
}

define void @mul_i128_1_reorder(i128 %0) {
; X64-LABEL: <mul_i128_1_reorder>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    imul rsi, rcx
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_1_reorder>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    madd x1, x1, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i128 1, %0
    ret void
}

define void @mul_i128_1001_1002(i128 %0) {
; X64-LABEL: <mul_i128_1001_1002>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov ecx, 0x1002
; X64-NEXT:    imul rsi, rcx
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov ecx, 0x1001
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_1001_1002>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1002 // =4098
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov x1, #0x1001 // =4097
; ARM64-NEXT:    madd x1, x1, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = mul nsw i128 %0, u0x10010000000000001002
    ret void
}

define void @mul_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <mul_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov qword ptr [rbp - 0x40], rdx
; X64-NEXT:    imul rsi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umulh x4, x2, x0
; ARM64-NEXT:    madd x4, x2, x1, x4
; ARM64-NEXT:    madd x3, x3, x0, x4
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = mul nsw i128 %0, %1
    ret void
}



define void @mul_i128_salvage_imm(i128 %0) {
; X64-LABEL: <mul_i128_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    imul rsi, rcx
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_salvage_imm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    madd x1, x1, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %1 = mul nsw i128 %0, 1
  ret void
}

define void @mul_i128_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: <mul_i128_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov qword ptr [rbp - 0x40], rdx
; X64-NEXT:    imul rsi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_salvage_reg>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umulh x4, x2, x0
; ARM64-NEXT:    madd x4, x2, x1, x4
; ARM64-NEXT:    madd x3, x3, x0, x4
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: <mul_i64_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov ecx, 0x1
; X64-NEXT:    imul rax, rcx
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i64_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x1 // =1
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %1 = mul nsw i64 %0, 1
  %2 = mul nsw i64 %0, %1
  ret void
}

define void @mul_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: <mul_i64_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    imul rax, rsi
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i64_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %2 = mul nsw i64 %0, %1
  %3 = mul nsw i64 %0, %2
  ret void
}

define void @mul_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: <mul_i37_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov ecx, 0x3
; X64-NEXT:    imul rax, rcx
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i37_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, #0x3 // =3
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    %1 = mul i37 %0, 3
    %2 = mul i37 %0, %1
    ret void
}

define void @mul_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: <mul_i37_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    imul rax, rsi
; X64-NEXT:    imul rdi, rax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i37_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    mul x1, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
    %2 = mul i37 %0, %1
    %3 = mul i37 %0, %2
    ret void
}

define void @mul_i128_no_salvage_imm_1(i128 %0) {
; X64-LABEL: <mul_i128_no_salvage_imm_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    mov ebx, 0x1
; X64-NEXT:    imul rcx, rbx
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    imul rbx, rdi
; X64-NEXT:    add rdx, rbx
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov qword ptr [rbp - 0x38], rdx
; X64-NEXT:    imul rsi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x38]
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_no_salvage_imm_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    madd x4, x4, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    madd x4, x4, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %1 = mul nsw i128 %0, 1
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i128_no_salvage_imm_1001_1002(i128 %0) {
; X64-LABEL: <mul_i128_no_salvage_imm_1001_1002>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    mov ebx, 0x1002
; X64-NEXT:    imul rcx, rbx
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    mov ebx, 0x1001
; X64-NEXT:    imul rbx, rdi
; X64-NEXT:    add rdx, rbx
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov qword ptr [rbp - 0x38], rdx
; X64-NEXT:    imul rsi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x38]
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_no_salvage_imm_1001_1002>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0x1002 // =4098
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    mov x4, #0x1001 // =4097
; ARM64-NEXT:    madd x4, x4, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    umulh x3, x2, x0
; ARM64-NEXT:    madd x3, x2, x1, x3
; ARM64-NEXT:    madd x4, x4, x0, x3
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %1 = mul nsw i128 %0, u0x10010000000000001002
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i128_no_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: <mul_i128_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov qword ptr [rbp - 0x40], rdx
; X64-NEXT:    mov rbx, rsi
; X64-NEXT:    imul rbx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov r8, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, r8
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rbx
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov qword ptr [rbp - 0x38], rdx
; X64-NEXT:    imul rsi, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x40]
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mul rdi
; X64-NEXT:    add rdx, rsi
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x38]
; X64-NEXT:    imul rcx, rdi
; X64-NEXT:    add rdx, rcx
; X64-NEXT:    add rsp, 0x38
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <mul_i128_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    umulh x4, x2, x0
; ARM64-NEXT:    madd x4, x2, x1, x4
; ARM64-NEXT:    madd x3, x3, x0, x4
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    umulh x4, x2, x0
; ARM64-NEXT:    madd x4, x2, x1, x4
; ARM64-NEXT:    madd x3, x3, x0, x4
; ARM64-NEXT:    mul x2, x2, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
  %2 = mul nsw i128 %0, %1
  %3 = mul nsw i128 %0, %2
  ret void
}
