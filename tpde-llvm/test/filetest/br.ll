; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i64 @br_simple1(i64 %0) {
; X64-LABEL: <br_simple1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <br_simple1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br label %block1
block1:
  ret i64 %0
}

define i64 @condbr0(i64 %0, i1 %1) {
; X64-LABEL: <condbr0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    test sil, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
; X64-NEXT:  <L0>:
; X64-NEXT:    lea rbx, [rbx + 0xa]
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <condbr0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    tst w1, #0x1
; ARM64-NEXT:    b.eq 0xc0 <condbr0+0x50>
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    add x19, x19, #0xa
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br i1 %1, label %block1, label %block2
block1:
  ret i64 %0
block2:
  %2 = add i64 %0, 10
  ret i64 %2
}

define i64 @condbr1(i64 %0, i1 %1) {
; X64-LABEL: <condbr1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    test sil, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    lea rax, [rbx + 0xa]
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
; X64-NEXT:  <L0>:
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <condbr1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    tst w1, #0x1
; ARM64-NEXT:    b.ne 0x150 <condbr1+0x50>
; ARM64-NEXT:    add x0, x19, #0xa
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  br i1 %1, label %block1, label %block2
block2:
  %2 = add i64 %0, 10
  ret i64 %2
block1:
  ret i64 %0
}

