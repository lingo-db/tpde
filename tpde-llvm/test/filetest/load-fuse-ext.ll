; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i32 @load_i8_zext_i32(ptr %a) {
; X64-LABEL: <load_i8_zext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, byte ptr [rdi]
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_zext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = zext i8 %l to i32
  ret i32 %x
}

define i32 @load_i8_sext_i32(ptr %a) {
; X64-LABEL: <load_i8_sext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, byte ptr [rdi]
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_sext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsb x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = sext i8 %l to i32
  ret i32 %x
}

define i37 @load_i8_zext_i37(ptr %a) {
; X64-LABEL: <load_i8_zext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, byte ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_zext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = zext i8 %l to i37
  ret i37 %x
}

define i37 @load_i8_sext_i37(ptr %a) {
; X64-LABEL: <load_i8_sext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, byte ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_sext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsb x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = sext i8 %l to i37
  ret i37 %x
}

define i64 @load_i8_zext_i64(ptr %a) {
; X64-LABEL: <load_i8_zext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, byte ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_zext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = zext i8 %l to i64
  ret i64 %x
}

define i64 @load_i8_sext_i64(ptr %a) {
; X64-LABEL: <load_i8_sext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, byte ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_sext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsb x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = sext i8 %l to i64
  ret i64 %x
}

define i128 @load_i8_zext_i128(ptr %a) {
; X64-LABEL: <load_i8_zext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx edi, byte ptr [rdi]
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_zext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    ubfx x0, x0, #0, #8
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = zext i8 %l to i128
  ret i128 %x
}

define i128 @load_i8_sext_i128(ptr %a) {
; X64-LABEL: <load_i8_sext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx edi, byte ptr [rdi]
; X64-NEXT:    movsx rdi, dil
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i8_sext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w0, [x0]
; ARM64-NEXT:    sxtb x0, w0
; ARM64-NEXT:    asr x1, x0, #63
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i8, ptr %a
  %x = sext i8 %l to i128
  ret i128 %x
}

define i32 @load_i16_zext_i32(ptr %a) {
; X64-LABEL: <load_i16_zext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, word ptr [rdi]
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_zext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = zext i16 %l to i32
  ret i32 %x
}

define i32 @load_i16_sext_i32(ptr %a) {
; X64-LABEL: <load_i16_sext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, word ptr [rdi]
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_sext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsh x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = sext i16 %l to i32
  ret i32 %x
}

define i37 @load_i16_zext_i37(ptr %a) {
; X64-LABEL: <load_i16_zext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, word ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_zext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = zext i16 %l to i37
  ret i37 %x
}

define i37 @load_i16_sext_i37(ptr %a) {
; X64-LABEL: <load_i16_sext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, word ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_sext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsh x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = sext i16 %l to i37
  ret i37 %x
}

define i64 @load_i16_zext_i64(ptr %a) {
; X64-LABEL: <load_i16_zext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, word ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_zext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = zext i16 %l to i64
  ret i64 %x
}

define i64 @load_i16_sext_i64(ptr %a) {
; X64-LABEL: <load_i16_sext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rdi, word ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_sext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsh x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = sext i16 %l to i64
  ret i64 %x
}

define i128 @load_i16_zext_i128(ptr %a) {
; X64-LABEL: <load_i16_zext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx edi, word ptr [rdi]
; X64-NEXT:    movzx edi, di
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_zext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    ubfx x0, x0, #0, #16
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = zext i16 %l to i128
  ret i128 %x
}

define i128 @load_i16_sext_i128(ptr %a) {
; X64-LABEL: <load_i16_sext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx edi, word ptr [rdi]
; X64-NEXT:    movsx rdi, di
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i16_sext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    sxth x0, w0
; ARM64-NEXT:    asr x1, x0, #63
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i16, ptr %a
  %x = sext i16 %l to i128
  ret i128 %x
}

define i32 @load_i24_zext_i32(ptr %a) {
; X64-LABEL: <load_i24_zext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    and edi, 0xffffff
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_zext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    ubfx w2, w2, #0, #24
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = zext i24 %l to i32
  ret i32 %x
}

define i32 @load_i24_sext_i32(ptr %a) {
; X64-LABEL: <load_i24_sext_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    shl edi, 0x8
; X64-NEXT:    sar edi, 0x8
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_sext_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    sbfx w2, w2, #0, #24
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = sext i24 %l to i32
  ret i32 %x
}

define i37 @load_i24_zext_i37(ptr %a) {
; X64-LABEL: <load_i24_zext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    and edi, 0xffffff
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_zext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    ubfx x2, x2, #0, #24
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = zext i24 %l to i37
  ret i37 %x
}

define i37 @load_i24_sext_i37(ptr %a) {
; X64-LABEL: <load_i24_sext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    shl rdi, 0x28
; X64-NEXT:    sar rdi, 0x28
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_sext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    sbfx x2, x2, #0, #24
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = sext i24 %l to i37
  ret i37 %x
}

define i64 @load_i24_zext_i64(ptr %a) {
; X64-LABEL: <load_i24_zext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    and edi, 0xffffff
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_zext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    ubfx x2, x2, #0, #24
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = zext i24 %l to i64
  ret i64 %x
}

define i64 @load_i24_sext_i64(ptr %a) {
; X64-LABEL: <load_i24_sext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    shl rdi, 0x28
; X64-NEXT:    sar rdi, 0x28
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_sext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    sbfx x2, x2, #0, #24
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = sext i24 %l to i64
  ret i64 %x
}

define i128 @load_i24_zext_i128(ptr %a) {
; X64-LABEL: <load_i24_zext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    and edi, 0xffffff
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_zext_i128>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    ubfx x2, x2, #0, #24
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldr x1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = zext i24 %l to i128
  ret i128 %x
}

define i128 @load_i24_sext_i128(ptr %a) {
; X64-LABEL: <load_i24_sext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x2]
; X64-NEXT:    shl edi, 0x10
; X64-NEXT:    or edi, eax
; X64-NEXT:    shl rdi, 0x28
; X64-NEXT:    sar rdi, 0x28
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i24_sext_i128>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x2]
; ARM64-NEXT:    ldrh w0, [x0]
; ARM64-NEXT:    orr w2, w0, w1, lsl #16
; ARM64-NEXT:    sbfx x2, x2, #0, #24
; ARM64-NEXT:    asr x0, x2, #63
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldr x1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %l = load i24, ptr %a
  %x = sext i24 %l to i128
  ret i128 %x
}

define i37 @load_i32_zext_i37(ptr %a) {
; X64-LABEL: <load_i32_zext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov edi, dword ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_zext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = zext i32 %l to i37
  ret i37 %x
}

define i37 @load_i32_sext_i37(ptr %a) {
; X64-LABEL: <load_i32_sext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rdi, dword ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_sext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsw x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = sext i32 %l to i37
  ret i37 %x
}

define i64 @load_i32_zext_i64(ptr %a) {
; X64-LABEL: <load_i32_zext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov edi, dword ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_zext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = zext i32 %l to i64
  ret i64 %x
}

define i64 @load_i32_sext_i64(ptr %a) {
; X64-LABEL: <load_i32_sext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rdi, dword ptr [rdi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_sext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrsw x0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = sext i32 %l to i64
  ret i64 %x
}

define i128 @load_i32_zext_i128(ptr %a) {
; X64-LABEL: <load_i32_zext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov edi, dword ptr [rdi]
; X64-NEXT:    mov edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_zext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    ubfx x0, x0, #0, #32
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = zext i32 %l to i128
  ret i128 %x
}

define i128 @load_i32_sext_i128(ptr %a) {
; X64-LABEL: <load_i32_sext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov edi, dword ptr [rdi]
; X64-NEXT:    movsxd rdi, edi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i32_sext_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    sxtw x0, w0
; ARM64-NEXT:    asr x1, x0, #63
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i32, ptr %a
  %x = sext i32 %l to i128
  ret i128 %x
}

define i37 @load_i33_zext_i37(ptr %a) {
; X64-LABEL: <load_i33_zext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    movabs rax, 0x1ffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_zext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    ubfx x2, x2, #0, #33
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = zext i33 %l to i37
  ret i37 %x
}

define i37 @load_i33_sext_i37(ptr %a) {
; X64-LABEL: <load_i33_sext_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    shl rdi, 0x1f
; X64-NEXT:    sar rdi, 0x1f
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_sext_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    sbfx x2, x2, #0, #33
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = sext i33 %l to i37
  ret i37 %x
}

define i64 @load_i33_zext_i64(ptr %a) {
; X64-LABEL: <load_i33_zext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    movabs rax, 0x1ffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_zext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    ubfx x2, x2, #0, #33
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = zext i33 %l to i64
  ret i64 %x
}

define i64 @load_i33_sext_i64(ptr %a) {
; X64-LABEL: <load_i33_sext_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    shl rdi, 0x1f
; X64-NEXT:    sar rdi, 0x1f
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_sext_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    sbfx x2, x2, #0, #33
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = sext i33 %l to i64
  ret i64 %x
}

define i128 @load_i33_zext_i128(ptr %a) {
; X64-LABEL: <load_i33_zext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    movabs rax, 0x1ffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_zext_i128>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    ubfx x2, x2, #0, #33
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldr x1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = zext i33 %l to i128
  ret i128 %x
}

define i128 @load_i33_sext_i128(ptr %a) {
; X64-LABEL: <load_i33_sext_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    movzx edi, byte ptr [rdi + 0x4]
; X64-NEXT:    shl rdi, 0x20
; X64-NEXT:    or rdi, rax
; X64-NEXT:    shl rdi, 0x1f
; X64-NEXT:    sar rdi, 0x1f
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x38]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <load_i33_sext_i128>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0, #0x4]
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    orr x2, x0, x1, lsl #32
; ARM64-NEXT:    sbfx x2, x2, #0, #33
; ARM64-NEXT:    asr x0, x2, #63
; ARM64-NEXT:    str x0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldr x1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %l = load i33, ptr %a
  %x = sext i33 %l to i128
  ret i128 %x
}
