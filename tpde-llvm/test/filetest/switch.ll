; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | llvm-objdump -d -r --symbolize-operands --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i32 @empty_switch(i32 %0) {
; X64-LABEL: <empty_switch>:
; X64:         0: 55 push rbp
; X64-NEXT:    1: 48 89 e5 mov rbp, rsp
; X64-NEXT:    4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64-NEXT:    14: e9 00 00 00 00 jmp <L0>
; X64-NEXT:  <L0>:
; X64-NEXT:    19: e9 00 00 00 00 jmp <L1>
; X64-NEXT:  <L1>:
; X64-NEXT:    1e: b8 ff ff ff ff mov eax, 0xffffffff
; X64-NEXT:    23: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    27: 5d pop rbp
; X64-NEXT:    28: c3 ret
; X64-NEXT:    29: 0f 1f 80 00 00 00 00 nop dword ptr [rax]
;
; ARM64-LABEL: <empty_switch>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    b 0x34 <empty_switch+0x14>
; ARM64-NEXT:    b 0x38 <empty_switch+0x18>
; ARM64-NEXT:    mov x0, #0xffffffff // =4294967295
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  switch i32 %0, label %default []
default:
  ret i32 -1
}

define i32 @basic_switch(i32 %0) {
; X64-LABEL: <basic_switch>:
; X64:         30: 55 push rbp
; X64-NEXT:    31: 48 89 e5 mov rbp, rsp
; X64-NEXT:    34: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    3d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64-NEXT:    44: 83 ff 00 cmp edi, 0x0
; X64-NEXT:    47: 0f 84 1c 00 00 00 je <L0>
; X64-NEXT:    4d: 83 ff 01 cmp edi, 0x1
; X64-NEXT:    50: 0f 84 18 00 00 00 je <L1>
; X64-NEXT:    56: 83 ff 02 cmp edi, 0x2
; X64-NEXT:    59: 0f 84 14 00 00 00 je <L2>
; X64-NEXT:    5f: e9 00 00 00 00 jmp <L3>
; X64-NEXT:  <L3>:
; X64-NEXT:    64: e9 54 00 00 00 jmp <L4>
; X64-NEXT:  <L0>:
; X64-NEXT:    69: e9 0a 00 00 00 jmp <L5>
; X64-NEXT:  <L1>:
; X64-NEXT:    6e: e9 1c 00 00 00 jmp <L6>
; X64-NEXT:  <L2>:
; X64-NEXT:    73: e9 2e 00 00 00 jmp <L7>
; X64-NEXT:  <L5>:
; X64-NEXT:    78: b8 00 00 00 00 mov eax, 0x0
; X64-NEXT:    7d: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    81: 5d pop rbp
; X64-NEXT:    82: c3 ret
; X64-NEXT:    83: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    8c: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L6>:
; X64-NEXT:    8f: b8 01 00 00 00 mov eax, 0x1
; X64-NEXT:    94: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    98: 5d pop rbp
; X64-NEXT:    99: c3 ret
; X64-NEXT:    9a: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    a3: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L7>:
; X64-NEXT:    a6: b8 02 00 00 00 mov eax, 0x2
; X64-NEXT:    ab: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    af: 5d pop rbp
; X64-NEXT:    b0: c3 ret
; X64-NEXT:    b1: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    ba: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L4>:
; X64-NEXT:    bd: b8 ff ff ff ff mov eax, 0xffffffff
; X64-NEXT:    c2: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    c6: 5d pop rbp
; X64-NEXT:    c7: c3 ret
; X64-NEXT:    c8: 0f 1f 84 00 00 00 00 00 nop dword ptr [rax + rax]
;
; ARM64-LABEL: <basic_switch>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    b.eq 0xa0 <basic_switch+0x30>
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.eq 0xa4 <basic_switch+0x34>
; ARM64-NEXT:    cmp w0, #0x2
; ARM64-NEXT:    b.eq 0xa8 <basic_switch+0x38>
; ARM64-NEXT:    b 0x9c <basic_switch+0x2c>
; ARM64-NEXT:    b 0x148 <basic_switch+0xd8>
; ARM64-NEXT:    b 0xac <basic_switch+0x3c>
; ARM64-NEXT:    b 0xe0 <basic_switch+0x70>
; ARM64-NEXT:    b 0x114 <basic_switch+0xa4>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0xffffffff // =4294967295
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  switch i32 %0, label %default [ i32 0, label %eq0
                                  i32 1, label %eq1
                                  i32 2, label %eq2]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
default:
  ret i32 -1
}

define i32 @switch_table(i32 %0) {
; x64-label: switch_table>:
; x64:    b0: 55 push rbp
; x64:    b1: 48 89 e5 mov rbp, rsp
; x64:    b4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; x64:    bd: 48 81 ec 10 00 00 00 sub rsp, 0x10
; x64:    c4: 83 ff 06 cmp edi, 0x6
; x64:    c7: 0f 87 2f 00 00 00 ja <l0>
; x64:    cd: 89 ff mov edi, edi
; x64:    cf: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; x64:    d6: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; x64:    da: 48 01 f8 add rax, rdi
; x64:    dd: ff e0 jmp rax
; x64:    df: 00 21 add byte ptr [rcx], ah
; x64:    e1: 00 00 add byte ptr [rax], al
; x64:    e3: 00 26 add byte ptr [rsi], ah
; x64:    e5: 00 00 add byte ptr [rax], al
; x64:    e7: 00 2b add byte ptr [rbx], ch
; x64:    e9: 00 00 add byte ptr [rax], al
; x64:    eb: 00 1c 00 add byte ptr [rax + rax], bl
; x64:    ee: 00 00 add byte ptr [rax], al
; x64:    f0: 30 00 xor byte ptr [rax], al
; x64:    f2: 00 00 add byte ptr [rax], al
; x64:    f4: 35 00 00 00 3a xor eax, 0x3a000000
; x64:    f9: 00 00 add byte ptr [rax], al
; x64:    fb: 00 e9 add cl, ch
; x64:    fd: a8 00 test al, 0x0
; x64:    ff: 00 00 add byte ptr [rax], al
; x64:    101: e9 19 00 00 00 jmp <l1>
; x64:    106: e9 2b 00 00 00 jmp <l2>
; x64:    10b: e9 3d 00 00 00 jmp <l3>
; x64:    110: e9 4f 00 00 00 jmp <l4>
; x64:    115: e9 61 00 00 00 jmp <l5>
; x64:    11a: e9 73 00 00 00 jmp <l6>
; x64:  <l1>:
; x64:    11f: b8 00 00 00 00 mov eax, 0x0
; x64:    124: 48 83 c4 10 add rsp, 0x10
; x64:    128: 5d pop rbp
; x64:    129: c3 ret
; x64:  <l2>:
; x64:    136: b8 01 00 00 00 mov eax, 0x1
; x64:    13b: 48 83 c4 10 add rsp, 0x10
; x64:    13f: 5d pop rbp
; x64:    140: c3 ret
; x64:  <l3>:
; x64:    14d: b8 02 00 00 00 mov eax, 0x2
; x64:    152: 48 83 c4 10 add rsp, 0x10
; x64:    156: 5d pop rbp
; x64:    157: c3 ret
; x64:  <l4>:
; x64:    164: b8 04 00 00 00 mov eax, 0x4
; x64:    169: 48 83 c4 10 add rsp, 0x10
; x64:    16d: 5d pop rbp
; x64:    16e: c3 ret
; x64:  <l5>:
; x64:    17b: b8 05 00 00 00 mov eax, 0x5
; x64:    180: 48 83 c4 10 add rsp, 0x10
; x64:    184: 5d pop rbp
; x64:    185: c3 ret
; x64:  <l6>:
; x64:    192: b8 06 00 00 00 mov eax, 0x6
; x64:    197: 48 83 c4 10 add rsp, 0x10
; x64:    19b: 5d pop rbp
; x64:    19c: c3 ret
; x64:    1a9: b8 ff ff ff ff mov eax, 0xffffffff
; x64:    1ae: 48 83 c4 10 add rsp, 0x10
; x64:    1b2: 5d pop rbp
; x64:    1b3: c3 ret
; x64:     ...
; X64-LABEL: <switch_table>:
; X64:         d0: 55 push rbp
; X64-NEXT:    d1: 48 89 e5 mov rbp, rsp
; X64-NEXT:    d4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    dd: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64-NEXT:    e4: 83 ff 06 cmp edi, 0x6
; X64-NEXT:    e7: 0f 87 2f 00 00 00 ja <L0>
; X64-NEXT:    ed: 89 ff mov edi, edi
; X64-NEXT:    ef: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; X64-NEXT:    f6: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64-NEXT:    fa: 48 01 f8 add rax, rdi
; X64-NEXT:    fd: ff e0 jmp rax
; X64-NEXT:    ff: 90 nop
; X64-NEXT:    100: 21 00 and dword ptr [rax], eax
; X64-NEXT:    102: 00 00 add byte ptr [rax], al
; X64-NEXT:    104: 26 00 00 add byte ptr es:[rax], al
; X64-NEXT:    107: 00 2b add byte ptr [rbx], ch
; X64-NEXT:    109: 00 00 add byte ptr [rax], al
; X64-NEXT:    10b: 00 1c 00 add byte ptr [rax + rax], bl
; X64-NEXT:    10e: 00 00 add byte ptr [rax], al
; X64-NEXT:    110: 30 00 xor byte ptr [rax], al
; X64-NEXT:    112: 00 00 add byte ptr [rax], al
; X64-NEXT:    114: 35 00 00 00 3a xor eax, 0x3a000000
; X64-NEXT:    119: 00 00 add byte ptr [rax], al
; X64-NEXT:    11b: 00 e9 add cl, ch
; X64-NEXT:    11d: a8 00 test al, 0x0
; X64-NEXT:    11f: 00 00 add byte ptr [rax], al
; X64-NEXT:    121: e9 19 00 00 00 jmp <L1>
; X64-NEXT:    126: e9 2b 00 00 00 jmp <L2>
; X64-NEXT:    12b: e9 3d 00 00 00 jmp <L3>
; X64-NEXT:    130: e9 4f 00 00 00 jmp <L4>
; X64-NEXT:    135: e9 61 00 00 00 jmp <L5>
; X64-NEXT:    13a: e9 73 00 00 00 jmp <L6>
; X64-NEXT:  <L1>:
; X64-NEXT:    13f: b8 00 00 00 00 mov eax, 0x0
; X64-NEXT:    144: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    148: 5d pop rbp
; X64-NEXT:    149: c3 ret
; X64-NEXT:    14a: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    153: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L2>:
; X64-NEXT:    156: b8 01 00 00 00 mov eax, 0x1
; X64-NEXT:    15b: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    15f: 5d pop rbp
; X64-NEXT:    160: c3 ret
; X64-NEXT:    161: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    16a: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L3>:
; X64-NEXT:    16d: b8 02 00 00 00 mov eax, 0x2
; X64-NEXT:    172: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    176: 5d pop rbp
; X64-NEXT:    177: c3 ret
; X64-NEXT:    178: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    181: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L4>:
; X64-NEXT:    184: b8 04 00 00 00 mov eax, 0x4
; X64-NEXT:    189: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    18d: 5d pop rbp
; X64-NEXT:    18e: c3 ret
; X64-NEXT:    18f: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    198: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L5>:
; X64-NEXT:    19b: b8 05 00 00 00 mov eax, 0x5
; X64-NEXT:    1a0: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    1a4: 5d pop rbp
; X64-NEXT:    1a5: c3 ret
; X64-NEXT:    1a6: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    1af: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L6>:
; X64-NEXT:    1b2: b8 06 00 00 00 mov eax, 0x6
; X64-NEXT:    1b7: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    1bb: 5d pop rbp
; X64-NEXT:    1bc: c3 ret
; X64-NEXT:    1bd: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    1c6: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:    1c9: b8 ff ff ff ff mov eax, 0xffffffff
; X64-NEXT:    1ce: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    1d2: 5d pop rbp
; X64-NEXT:    1d3: c3 ret
; X64-NEXT:    1d4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    1dd: 0f 1f 00 nop dword ptr [rax]
;
; ARM64-LABEL: <switch_table>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x4
; ARM64-NEXT:    b.eq 0x1dc <switch_table+0x5c>
; ARM64-NEXT:    b.hi 0x1b8 <switch_table+0x38>
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    b.eq 0x1d0 <switch_table+0x50>
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.eq 0x1d4 <switch_table+0x54>
; ARM64-NEXT:    cmp w0, #0x2
; ARM64-NEXT:    b.eq 0x1d8 <switch_table+0x58>
; ARM64-NEXT:    b 0x1cc <switch_table+0x4c>
; ARM64-NEXT:    cmp w0, #0x5
; ARM64-NEXT:    b.eq 0x1e0 <switch_table+0x60>
; ARM64-NEXT:    cmp w0, #0x6
; ARM64-NEXT:    b.eq 0x1e4 <switch_table+0x64>
; ARM64-NEXT:    b 0x1cc <switch_table+0x4c>
; ARM64-NEXT:    b 0x320 <switch_table+0x1a0>
; ARM64-NEXT:    b 0x1e8 <switch_table+0x68>
; ARM64-NEXT:    b 0x21c <switch_table+0x9c>
; ARM64-NEXT:    b 0x250 <switch_table+0xd0>
; ARM64-NEXT:    b 0x284 <switch_table+0x104>
; ARM64-NEXT:    b 0x2b8 <switch_table+0x138>
; ARM64-NEXT:    b 0x2ec <switch_table+0x16c>
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x4 // =4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x5 // =5
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x6 // =6
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0xffffffff // =4294967295
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  switch i32 %0, label %default [
    i32 0, label %eq0
    i32 1, label %eq1
    i32 2, label %eq2
    i32 4, label %eq4
    i32 5, label %eq5
    i32 6, label %eq6]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
eq4:
  ret i32 4
eq5:
  ret i32 5
eq6:
  ret i32 6
default:
  ret i32 -1
}

define i32 @switch_table2(i32 %0) {
; X64-LABEL: <switch_table2>:
; X64:         1e0: 55 push rbp
; X64-NEXT:    1e1: 48 89 e5 mov rbp, rsp
; X64-NEXT:    1e4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    1ed: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64-NEXT:    1f4: 83 ff 03 cmp edi, 0x3
; X64-NEXT:    1f7: 0f 82 3b 00 00 00 jb <L0>
; X64-NEXT:    1fd: 83 ff 09 cmp edi, 0x9
; X64-NEXT:    200: 0f 87 32 00 00 00 ja <L0>
; X64-NEXT:    206: 89 ff mov edi, edi
; X64-NEXT:    208: 48 83 ef 03 sub rdi, 0x3
; X64-NEXT:    20c: 48 8d 05 09 00 00 00 lea rax, <switch_table2+0x3c>
; X64-NEXT:    213: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64-NEXT:    217: 48 01 f8 add rax, rdi
; X64-NEXT:    21a: ff e0 jmp rax
; X64-NEXT:    21c: 21 00 and dword ptr [rax], eax
; X64-NEXT:    21e: 00 00 add byte ptr [rax], al
; X64-NEXT:    220: 26 00 00 add byte ptr es:[rax], al
; X64-NEXT:    223: 00 2b add byte ptr [rbx], ch
; X64-NEXT:    225: 00 00 add byte ptr [rax], al
; X64-NEXT:    227: 00 1c 00 add byte ptr [rax + rax], bl
; X64-NEXT:    22a: 00 00 add byte ptr [rax], al
; X64-NEXT:    22c: 30 00 xor byte ptr [rax], al
; X64-NEXT:    22e: 00 00 add byte ptr [rax], al
; X64-NEXT:    230: 35 00 00 00 3a xor eax, 0x3a000000
; X64-NEXT:    235: 00 00 add byte ptr [rax], al
; X64-NEXT:    237: 00 e9 add cl, ch
; X64-NEXT:    239: a8 00 test al, 0x0
; X64-NEXT:    23b: 00 00 add byte ptr [rax], al
; X64-NEXT:    23d: e9 19 00 00 00 jmp <L1>
; X64-NEXT:    242: e9 2b 00 00 00 jmp <L2>
; X64-NEXT:    247: e9 3d 00 00 00 jmp <L3>
; X64-NEXT:    24c: e9 4f 00 00 00 jmp <L4>
; X64-NEXT:    251: e9 61 00 00 00 jmp <L5>
; X64-NEXT:    256: e9 73 00 00 00 jmp <L6>
; X64-NEXT:  <L1>:
; X64-NEXT:    25b: b8 03 00 00 00 mov eax, 0x3
; X64-NEXT:    260: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    264: 5d pop rbp
; X64-NEXT:    265: c3 ret
; X64-NEXT:    266: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    26f: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L2>:
; X64-NEXT:    272: b8 04 00 00 00 mov eax, 0x4
; X64-NEXT:    277: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    27b: 5d pop rbp
; X64-NEXT:    27c: c3 ret
; X64-NEXT:    27d: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    286: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L3>:
; X64-NEXT:    289: b8 05 00 00 00 mov eax, 0x5
; X64-NEXT:    28e: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    292: 5d pop rbp
; X64-NEXT:    293: c3 ret
; X64-NEXT:    294: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    29d: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L4>:
; X64-NEXT:    2a0: b8 07 00 00 00 mov eax, 0x7
; X64-NEXT:    2a5: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    2a9: 5d pop rbp
; X64-NEXT:    2aa: c3 ret
; X64-NEXT:    2ab: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    2b4: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L5>:
; X64-NEXT:    2b7: b8 08 00 00 00 mov eax, 0x8
; X64-NEXT:    2bc: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    2c0: 5d pop rbp
; X64-NEXT:    2c1: c3 ret
; X64-NEXT:    2c2: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    2cb: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L6>:
; X64-NEXT:    2ce: b8 09 00 00 00 mov eax, 0x9
; X64-NEXT:    2d3: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    2d7: 5d pop rbp
; X64-NEXT:    2d8: c3 ret
; X64-NEXT:    2d9: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    2e2: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:    2e5: b8 ff ff ff ff mov eax, 0xffffffff
; X64-NEXT:    2ea: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    2ee: 5d pop rbp
; X64-NEXT:    2ef: c3 ret
;
; ARM64-LABEL: <switch_table2>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x7
; ARM64-NEXT:    b.eq 0x3ac <switch_table2+0x5c>
; ARM64-NEXT:    b.hi 0x388 <switch_table2+0x38>
; ARM64-NEXT:    cmp w0, #0x3
; ARM64-NEXT:    b.eq 0x3a0 <switch_table2+0x50>
; ARM64-NEXT:    cmp w0, #0x4
; ARM64-NEXT:    b.eq 0x3a4 <switch_table2+0x54>
; ARM64-NEXT:    cmp w0, #0x5
; ARM64-NEXT:    b.eq 0x3a8 <switch_table2+0x58>
; ARM64-NEXT:    b 0x39c <switch_table2+0x4c>
; ARM64-NEXT:    cmp w0, #0x8
; ARM64-NEXT:    b.eq 0x3b0 <switch_table2+0x60>
; ARM64-NEXT:    cmp w0, #0x9
; ARM64-NEXT:    b.eq 0x3b4 <switch_table2+0x64>
; ARM64-NEXT:    b 0x39c <switch_table2+0x4c>
; ARM64-NEXT:    b 0x4f0 <switch_table2+0x1a0>
; ARM64-NEXT:    b 0x3b8 <switch_table2+0x68>
; ARM64-NEXT:    b 0x3ec <switch_table2+0x9c>
; ARM64-NEXT:    b 0x420 <switch_table2+0xd0>
; ARM64-NEXT:    b 0x454 <switch_table2+0x104>
; ARM64-NEXT:    b 0x488 <switch_table2+0x138>
; ARM64-NEXT:    b 0x4bc <switch_table2+0x16c>
; ARM64-NEXT:    mov x0, #0x3 // =3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x4 // =4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x5 // =5
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x7 // =7
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x8 // =8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x9 // =9
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0xffffffff // =4294967295
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  switch i32 %0, label %default [
    i32 3, label %eq3
    i32 4, label %eq4
    i32 5, label %eq5
    i32 7, label %eq7
    i32 8, label %eq8
    i32 9, label %eq9]
eq3:
  ret i32 3
eq4:
  ret i32 4
eq5:
  ret i32 5
eq7:
  ret i32 7
eq8:
  ret i32 8
eq9:
  ret i32 9
default:
  ret i32 -1
}


define i32 @switch_binsearch(i32 %0) {
; X64-LABEL: <switch_binsearch>:
; X64:         2f0: 55 push rbp
; X64-NEXT:    2f1: 48 89 e5 mov rbp, rsp
; X64-NEXT:    2f4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    2fd: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64-NEXT:    304: 83 ff 03 cmp edi, 0x3
; X64-NEXT:    307: 0f 84 43 00 00 00 je <L0>
; X64-NEXT:    30d: 0f 87 17 00 00 00 ja <L1>
; X64-NEXT:    313: 83 ff 01 cmp edi, 0x1
; X64-NEXT:    316: 0f 84 2a 00 00 00 je <L2>
; X64-NEXT:    31c: 83 ff 02 cmp edi, 0x2
; X64-NEXT:    31f: 0f 84 26 00 00 00 je <L3>
; X64-NEXT:    325: e9 17 00 00 00 jmp <L4>
; X64-NEXT:  <L1>:
; X64-NEXT:    32a: 83 ff 64 cmp edi, 0x64
; X64-NEXT:    32d: 0f 84 22 00 00 00 je <L5>
; X64-NEXT:    333: 83 ff 65 cmp edi, 0x65
; X64-NEXT:    336: 0f 84 1e 00 00 00 je <L6>
; X64-NEXT:    33c: e9 00 00 00 00 jmp <L4>
; X64-NEXT:  <L4>:
; X64-NEXT:    341: e9 8c 00 00 00 jmp <L7>
; X64-NEXT:  <L2>:
; X64-NEXT:    346: e9 14 00 00 00 jmp <L8>
; X64-NEXT:  <L3>:
; X64-NEXT:    34b: e9 26 00 00 00 jmp <L9>
; X64-NEXT:  <L0>:
; X64-NEXT:    350: e9 38 00 00 00 jmp <L10>
; X64-NEXT:  <L5>:
; X64-NEXT:    355: e9 4a 00 00 00 jmp <L11>
; X64-NEXT:  <L6>:
; X64-NEXT:    35a: e9 5c 00 00 00 jmp <L12>
; X64-NEXT:  <L8>:
; X64-NEXT:    35f: b8 01 00 00 00 mov eax, 0x1
; X64-NEXT:    364: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    368: 5d pop rbp
; X64-NEXT:    369: c3 ret
; X64-NEXT:    36a: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    373: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L9>:
; X64-NEXT:    376: b8 02 00 00 00 mov eax, 0x2
; X64-NEXT:    37b: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    37f: 5d pop rbp
; X64-NEXT:    380: c3 ret
; X64-NEXT:    381: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    38a: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L10>:
; X64-NEXT:    38d: b8 03 00 00 00 mov eax, 0x3
; X64-NEXT:    392: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    396: 5d pop rbp
; X64-NEXT:    397: c3 ret
; X64-NEXT:    398: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    3a1: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L11>:
; X64-NEXT:    3a4: b8 64 00 00 00 mov eax, 0x64
; X64-NEXT:    3a9: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    3ad: 5d pop rbp
; X64-NEXT:    3ae: c3 ret
; X64-NEXT:    3af: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    3b8: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L12>:
; X64-NEXT:    3bb: b8 65 00 00 00 mov eax, 0x65
; X64-NEXT:    3c0: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    3c4: 5d pop rbp
; X64-NEXT:    3c5: c3 ret
; X64-NEXT:    3c6: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    3cf: 0f 1f 00 nop dword ptr [rax]
; X64-NEXT:  <L7>:
; X64-NEXT:    3d2: b8 ff ff ff ff mov eax, 0xffffffff
; X64-NEXT:    3d7: 48 83 c4 30 add rsp, 0x30
; X64-NEXT:    3db: 5d pop rbp
; X64-NEXT:    3dc: c3 ret
; X64-NEXT:    3dd: 0f 1f 00 nop dword ptr [rax]
;
; ARM64-LABEL: <switch_binsearch>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x3
; ARM64-NEXT:    b.eq 0x570 <switch_binsearch+0x50>
; ARM64-NEXT:    b.hi 0x550 <switch_binsearch+0x30>
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.eq 0x568 <switch_binsearch+0x48>
; ARM64-NEXT:    cmp w0, #0x2
; ARM64-NEXT:    b.eq 0x56c <switch_binsearch+0x4c>
; ARM64-NEXT:    b 0x564 <switch_binsearch+0x44>
; ARM64-NEXT:    cmp w0, #0x64
; ARM64-NEXT:    b.eq 0x574 <switch_binsearch+0x54>
; ARM64-NEXT:    cmp w0, #0x65
; ARM64-NEXT:    b.eq 0x578 <switch_binsearch+0x58>
; ARM64-NEXT:    b 0x564 <switch_binsearch+0x44>
; ARM64-NEXT:    b 0x680 <switch_binsearch+0x160>
; ARM64-NEXT:    b 0x57c <switch_binsearch+0x5c>
; ARM64-NEXT:    b 0x5b0 <switch_binsearch+0x90>
; ARM64-NEXT:    b 0x5e4 <switch_binsearch+0xc4>
; ARM64-NEXT:    b 0x618 <switch_binsearch+0xf8>
; ARM64-NEXT:    b 0x64c <switch_binsearch+0x12c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x3 // =3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x64 // =100
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x65 // =101
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0xffffffff // =4294967295
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  switch i32 %0, label %default [
    i32 1, label %eq1
    i32 2, label %eq2
    i32 3, label %eq3
    i32 100, label %eq100
    i32 101, label %eq101
  ]
eq1:
  ret i32 1
eq2:
  ret i32 2
eq3:
  ret i32 3
eq100:
  ret i32 100
eq101:
  ret i32 101
default:
  ret i32 -1
}

define i32 @switch_i32_noreuse(i32 %p) {
; X64-LABEL: <switch_i32_noreuse>:
; X64:         3e0: 55 push rbp
; X64-NEXT:    3e1: 48 89 e5 mov rbp, rsp
; X64-NEXT:    3e4: 53 push rbx
; X64-NEXT:    3e5: 0f 1f 84 00 00 00 00 00 nop dword ptr [rax + rax]
; X64-NEXT:    3ed: 48 81 ec 28 00 00 00 sub rsp, 0x28
; X64-NEXT:    3f4: 89 fb mov ebx, edi
; X64-NEXT:    3f6: 89 d8 mov eax, ebx
; X64-NEXT:    3f8: 83 f8 01 cmp eax, 0x1
; X64-NEXT:    3fb: 0f 84 13 00 00 00 je <L0>
; X64-NEXT:    401: 83 f8 02 cmp eax, 0x2
; X64-NEXT:    404: 0f 84 0f 00 00 00 je <L1>
; X64-NEXT:    40a: e9 00 00 00 00 jmp <L2>
; X64-NEXT:  <L2>:
; X64-NEXT:    40f: e9 38 00 00 00 jmp <L3>
; X64-NEXT:  <L0>:
; X64-NEXT:    414: e9 05 00 00 00 jmp <L4>
; X64-NEXT:  <L1>:
; X64-NEXT:    419: e9 17 00 00 00 jmp <L5>
; X64-NEXT:  <L4>:
; X64-NEXT:    41e: b8 01 00 00 00 mov eax, 0x1
; X64-NEXT:    423: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    427: 5b pop rbx
; X64-NEXT:    428: 5d pop rbp
; X64-NEXT:    429: c3 ret
; X64-NEXT:    42a: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    433: 66 90 nop
; X64-NEXT:  <L5>:
; X64-NEXT:    435: b8 02 00 00 00 mov eax, 0x2
; X64-NEXT:    43a: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    43e: 5b pop rbx
; X64-NEXT:    43f: 5d pop rbp
; X64-NEXT:    440: c3 ret
; X64-NEXT:    441: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    44a: 66 90 nop
; X64-NEXT:  <L3>:
; X64-NEXT:    44c: 89 d8 mov eax, ebx
; X64-NEXT:    44e: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    452: 5b pop rbx
; X64-NEXT:    453: 5d pop rbp
; X64-NEXT:    454: c3 ret
; X64-NEXT:    455: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    45e: 66 90 nop
;
; ARM64-LABEL: <switch_i32_noreuse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    b.eq 0x6e0 <switch_i32_noreuse+0x30>
; ARM64-NEXT:    cmp w0, #0x2
; ARM64-NEXT:    b.eq 0x6e4 <switch_i32_noreuse+0x34>
; ARM64-NEXT:    b 0x6dc <switch_i32_noreuse+0x2c>
; ARM64-NEXT:    b 0x750 <switch_i32_noreuse+0xa0>
; ARM64-NEXT:    b 0x6e8 <switch_i32_noreuse+0x38>
; ARM64-NEXT:    b 0x71c <switch_i32_noreuse+0x6c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  switch i32 %p, label %default [
    i32 1, label %l1
    i32 2, label %l2
  ]
l1:
  ret i32 1
l2:
  ret i32 2
default:
  ret i32 %p
}

define i64 @switch_i64_noreuse(i64 %p) {
; X64-LABEL: <switch_i64_noreuse>:
; X64:         460: 55 push rbp
; X64-NEXT:    461: 48 89 e5 mov rbp, rsp
; X64-NEXT:    464: 53 push rbx
; X64-NEXT:    465: 0f 1f 84 00 00 00 00 00 nop dword ptr [rax + rax]
; X64-NEXT:    46d: 48 81 ec 28 00 00 00 sub rsp, 0x28
; X64-NEXT:    474: 48 89 fb mov rbx, rdi
; X64-NEXT:    477: 48 89 d8 mov rax, rbx
; X64-NEXT:    47a: 48 83 f8 01 cmp rax, 0x1
; X64-NEXT:    47e: 0f 84 14 00 00 00 je <L0>
; X64-NEXT:    484: 48 83 f8 02 cmp rax, 0x2
; X64-NEXT:    488: 0f 84 0f 00 00 00 je <L1>
; X64-NEXT:    48e: e9 00 00 00 00 jmp <L2>
; X64-NEXT:  <L2>:
; X64-NEXT:    493: e9 38 00 00 00 jmp <L3>
; X64-NEXT:  <L0>:
; X64-NEXT:    498: e9 05 00 00 00 jmp <L4>
; X64-NEXT:  <L1>:
; X64-NEXT:    49d: e9 17 00 00 00 jmp <L5>
; X64-NEXT:  <L4>:
; X64-NEXT:    4a2: b8 01 00 00 00 mov eax, 0x1
; X64-NEXT:    4a7: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    4ab: 5b pop rbx
; X64-NEXT:    4ac: 5d pop rbp
; X64-NEXT:    4ad: c3 ret
; X64-NEXT:    4ae: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    4b7: 66 90 nop
; X64-NEXT:  <L5>:
; X64-NEXT:    4b9: b8 02 00 00 00 mov eax, 0x2
; X64-NEXT:    4be: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    4c2: 5b pop rbx
; X64-NEXT:    4c3: 5d pop rbp
; X64-NEXT:    4c4: c3 ret
; X64-NEXT:    4c5: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64-NEXT:    4ce: 66 90 nop
; X64-NEXT:  <L3>:
; X64-NEXT:    4d0: 48 89 d8 mov rax, rbx
; X64-NEXT:    4d3: 48 83 c4 28 add rsp, 0x28
; X64-NEXT:    4d7: 5b pop rbx
; X64-NEXT:    4d8: 5d pop rbp
; X64-NEXT:    4d9: c3 ret
;
; ARM64-LABEL: <switch_i64_noreuse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [sp, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    b.eq 0x7c0 <switch_i64_noreuse+0x30>
; ARM64-NEXT:    cmp x0, #0x2
; ARM64-NEXT:    b.eq 0x7c4 <switch_i64_noreuse+0x34>
; ARM64-NEXT:    b 0x7bc <switch_i64_noreuse+0x2c>
; ARM64-NEXT:    b 0x830 <switch_i64_noreuse+0xa0>
; ARM64-NEXT:    b 0x7c8 <switch_i64_noreuse+0x38>
; ARM64-NEXT:    b 0x7fc <switch_i64_noreuse+0x6c>
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr x19, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  switch i64 %p, label %default [
    i64 1, label %l1
    i64 2, label %l2
  ]
l1:
  ret i64 1
l2:
  ret i64 2
default:
  ret i64 %p
}

