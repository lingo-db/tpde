; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define void @icmp_eq_i8_0(i8 %0) {
; X64-LABEL: <icmp_eq_i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i8 %0, 0
    ret void
}

define void @icmp_ne_i8_0(i8 %0) {
; X64-LABEL: <icmp_ne_i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i8_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i8 %0, 0
    ret void
}

define void @icmp_eq_i8_1(i8 %0) {
; X64-LABEL: <icmp_eq_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i8 %0, 1
    ret void
}

define void @icmp_eq_i8_-1(i8 %0) {
; X64-LABEL: <icmp_eq_i8_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0xff
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0xff
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i8 %0, -1
    ret void
}

define void @icmp_eq_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: <icmp_eq_i8_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    movzx esi, sil
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i8_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    uxtb w1, w1
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i8 %0, %1
    ret void
}

define void @icmp_sgt_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: <icmp_sgt_i8_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    movsx esi, sil
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i8_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    sxtb w1, w1
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i8 %0, %1
    ret void
}

define void @icmp_ugt_i8_1(i8 %0) {
; X64-LABEL: <icmp_ugt_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    seta al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i8 %0, 1
    ret void
}

define void @icmp_uge_i8_1(i8 %0) {
; X64-LABEL: <icmp_uge_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i8 %0, 1
    ret void
}

define void @icmp_ult_i8_1(i8 %0) {
; X64-LABEL: <icmp_ult_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i8 %0, 1
    ret void
}

define void @icmp_ule_i8_1(i8 %0) {
; X64-LABEL: <icmp_ule_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setbe al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i8 %0, 1
    ret void
}

define void @icmp_sgt_i8_1(i8 %0) {
; X64-LABEL: <icmp_sgt_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i8 %0, 1
    ret void
}

define void @icmp_sge_i8_1(i8 %0) {
; X64-LABEL: <icmp_sge_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i8 %0, 1
    ret void
}

define void @icmp_slt_i8_1(i8 %0) {
; X64-LABEL: <icmp_slt_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i8 %0, 1
    ret void
}

define void @icmp_sle_i8_1(i8 %0) {
; X64-LABEL: <icmp_sle_i8_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i8_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i8 %0, 1
    ret void
}

define i1 @icmp_sle_i8_-1(i8 %0) {
; X64-LABEL: <icmp_sle_i8_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    cmp edi, -0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i8_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    cmn w0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = icmp sle i8 %0, -1
  ret i1 %1
}



define void @icmp_eq_i16_0(i16 %0) {
; X64-LABEL: <icmp_eq_i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i16 %0, 0
    ret void
}

define void @icmp_ne_i16_0(i16 %0) {
; X64-LABEL: <icmp_ne_i16_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i16_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i16 %0, 0
    ret void
}

define void @icmp_eq_i16_1(i16 %0) {
; X64-LABEL: <icmp_eq_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i16 %0, 1
    ret void
}

define void @icmp_eq_i16_-1(i16 %0) {
; X64-LABEL: <icmp_eq_i16_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0xffff
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    mov x16, #0xffff // =65535
; ARM64-NEXT:    cmp w0, w16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i16 %0, -1
    ret void
}

define void @icmp_eq_i16_f000(i16 %0) {
; X64-LABEL: <icmp_eq_i16_f000>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0xf000
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_f000>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0xf, lsl #12 // =0xf000
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i16 %0, u0xf000
    ret void
}


define void @icmp_eq_i16_1001(i16 %0) {
; X64-LABEL: <icmp_eq_i16_1001>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1001
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_1001>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    mov x16, #0x1001 // =4097
; ARM64-NEXT:    cmp w0, w16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i16 %0, u0x1001
    ret void
}

define void @icmp_eq_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: <icmp_eq_i16_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    movzx esi, si
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i16_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    uxth w1, w1
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i16 %0, %1
    ret void
}

define void @icmp_sgt_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: <icmp_sgt_i16_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    movsx esi, si
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i16_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    sxth w1, w1
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i16 %0, %1
    ret void
}

define void @icmp_ugt_i16_1(i16 %0) {
; X64-LABEL: <icmp_ugt_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    seta al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i16 %0, 1
    ret void
}

define void @icmp_uge_i16_1(i16 %0) {
; X64-LABEL: <icmp_uge_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i16 %0, 1
    ret void
}

define void @icmp_ult_i16_1(i16 %0) {
; X64-LABEL: <icmp_ult_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i16 %0, 1
    ret void
}

define void @icmp_ule_i16_1(i16 %0) {
; X64-LABEL: <icmp_ule_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setbe al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    uxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i16 %0, 1
    ret void
}

define void @icmp_sgt_i16_1(i16 %0) {
; X64-LABEL: <icmp_sgt_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i16 %0, 1
    ret void
}

define void @icmp_sge_i16_1(i16 %0) {
; X64-LABEL: <icmp_sge_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i16 %0, 1
    ret void
}

define void @icmp_slt_i16_1(i16 %0) {
; X64-LABEL: <icmp_slt_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i16 %0, 1
    ret void
}

define i1 @icmp_slt_i16_m11776(i16 %0) {
; X64-LABEL: <icmp_slt_i16_m11776>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    cmp edi, 0xffffd200
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i16_m11776>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    mov x16, #-0x2e00 // =-11776
; ARM64-NEXT:    cmp w0, w16
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt i16 %0, -11776
  ret i1 %r
}

define void @icmp_sle_i16_1(i16 %0) {
; X64-LABEL: <icmp_sle_i16_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i16_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i16 %0, 1
    ret void
}



define void @icmp_eq_i32_0(i32 %0) {
; X64-LABEL: <icmp_eq_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, 0
    ret void
}

define void @icmp_ne_i32_0(i32 %0) {
; X64-LABEL: <icmp_ne_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test edi, edi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x0
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i32 %0, 0
    ret void
}

define void @icmp_eq_i32_1(i32 %0) {
; X64-LABEL: <icmp_eq_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, 1
    ret void
}

define void @icmp_eq_i32_-1(i32 %0) {
; X64-LABEL: <icmp_eq_i32_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, -0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmn w0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, -1
    ret void
}

define void @icmp_eq_i32_f000(i32 %0) {
; X64-LABEL: <icmp_eq_i32_f000>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0xf000
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_f000>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0xf, lsl #12 // =0xf000
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, u0xf000
    ret void
}


define void @icmp_eq_i32_1001(i32 %0) {
; X64-LABEL: <icmp_eq_i32_1001>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1001
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_1001>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x16, #0x1001 // =4097
; ARM64-NEXT:    cmp w0, w16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i32 %0, u0x1001
    ret void
}

define void @icmp_eq_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: <icmp_eq_i32_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i32_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i32 %0, %1
    ret void
}

define void @icmp_sgt_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: <icmp_sgt_i32_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i32_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i32 %0, %1
    ret void
}

define void @icmp_ugt_i32_1(i32 %0) {
; X64-LABEL: <icmp_ugt_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    seta al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i32 %0, 1
    ret void
}

define void @icmp_uge_i32_1(i32 %0) {
; X64-LABEL: <icmp_uge_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i32 %0, 1
    ret void
}

define void @icmp_ult_i32_1(i32 %0) {
; X64-LABEL: <icmp_ult_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i32 %0, 1
    ret void
}

define void @icmp_ule_i32_1(i32 %0) {
; X64-LABEL: <icmp_ule_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setbe al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i32 %0, 1
    ret void
}

define void @icmp_sgt_i32_1(i32 %0) {
; X64-LABEL: <icmp_sgt_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i32 %0, 1
    ret void
}

define void @icmp_sge_i32_1(i32 %0) {
; X64-LABEL: <icmp_sge_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i32 %0, 1
    ret void
}

define void @icmp_slt_i32_1(i32 %0) {
; X64-LABEL: <icmp_slt_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i32 %0, 1
    ret void
}

define void @icmp_sle_i32_1(i32 %0) {
; X64-LABEL: <icmp_sle_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i32 %0, 1
    ret void
}



define void @icmp_eq_i64_0(i64 %0) {
; X64-LABEL: <icmp_eq_i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x0
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, 0
    ret void
}

define void @icmp_ne_i64_0(i64 %0) {
; X64-LABEL: <icmp_ne_i64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i64_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x0
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i64 %0, 0
    ret void
}

define void @icmp_eq_i64_1(i64 %0) {
; X64-LABEL: <icmp_eq_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, 1
    ret void
}

define void @icmp_eq_i64_-1(i64 %0) {
; X64-LABEL: <icmp_eq_i64_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, -0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmn x0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, -1
    ret void
}

define void @icmp_eq_i64_f000(i64 %0) {
; X64-LABEL: <icmp_eq_i64_f000>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0xf000
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_f000>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0xf, lsl #12 // =0xf000
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, u0xf000
    ret void
}

define void @icmp_eq_i64_1001(i64 %0) {
; X64-LABEL: <icmp_eq_i64_1001>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1001
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_1001>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x16, #0x1001 // =4097
; ARM64-NEXT:    cmp x0, x16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, u0x1001
    ret void
}

define void @icmp_eq_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: <icmp_eq_i64_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i64 %0, %1
    ret void
}

define void @icmp_sgt_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: <icmp_sgt_i64_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i64_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i64 %0, %1
    ret void
}

define void @icmp_ugt_i64_1(i64 %0) {
; X64-LABEL: <icmp_ugt_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    seta al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i64 %0, 1
    ret void
}

define void @icmp_uge_i64_1(i64 %0) {
; X64-LABEL: <icmp_uge_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i64 %0, 1
    ret void
}

define void @icmp_ult_i64_1(i64 %0) {
; X64-LABEL: <icmp_ult_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i64 %0, 1
    ret void
}

define void @icmp_ule_i64_1(i64 %0) {
; X64-LABEL: <icmp_ule_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setbe al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i64 %0, 1
    ret void
}

define void @icmp_sgt_i64_1(i64 %0) {
; X64-LABEL: <icmp_sgt_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i64 %0, 1
    ret void
}

define void @icmp_sge_i64_1(i64 %0) {
; X64-LABEL: <icmp_sge_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i64 %0, 1
    ret void
}

define void @icmp_slt_i64_1(i64 %0) {
; X64-LABEL: <icmp_slt_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i64 %0, 1
    ret void
}

define void @icmp_sle_i64_1(i64 %0) {
; X64-LABEL: <icmp_sle_i64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i64 %0, 1
    ret void
}



define void @icmp_eq_i37_0(i37 %0) {
; X64-LABEL: <icmp_eq_i37_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x0
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i37 %0, 0
    ret void
}

define void @icmp_ne_i37_0(i37 %0) {
; X64-LABEL: <icmp_ne_i37_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    test rdi, rdi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i37_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x0
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ne i37 %0, 0
    ret void
}

define void @icmp_eq_i37_1(i37 %0) {
; X64-LABEL: <icmp_eq_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i37 %0, 1
    ret void
}

define void @icmp_eq_i37_-1(i37 %0) {
; X64-LABEL: <icmp_eq_i37_-1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    cmp rdi, rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_-1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    mov x16, #0x1fffffffff // =137438953471
; ARM64-NEXT:    cmp x0, x16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i37 %0, -1
    ret void
}

define void @icmp_eq_i37_f000(i37 %0) {
; X64-LABEL: <icmp_eq_i37_f000>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0xf000
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_f000>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0xf, lsl #12 // =0xf000
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i37 %0, u0xf000
    ret void
}

define void @icmp_eq_i37_1001(i37 %0) {
; X64-LABEL: <icmp_eq_i37_1001>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1001
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_1001>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    mov x16, #0x1001 // =4097
; ARM64-NEXT:    cmp x0, x16
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i37 %0, u0x1001
    ret void
}

define void @icmp_eq_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: <icmp_eq_i37_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rsi, rax
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i37_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    ubfx x1, x1, #0, #37
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i37 %0, %1
    ret void
}

define void @icmp_sgt_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: <icmp_sgt_i37_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    shl rsi, 0x1b
; X64-NEXT:    sar rsi, 0x1b
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i37_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    sbfx x1, x1, #0, #37
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i37 %0, %1
    ret void
}

define void @icmp_ugt_i37_1(i37 %0) {
; X64-LABEL: <icmp_ugt_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    seta al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ugt i37 %0, 1
    ret void
}

define void @icmp_uge_i37_1(i37 %0) {
; X64-LABEL: <icmp_uge_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp uge i37 %0, 1
    ret void
}

define void @icmp_ult_i37_1(i37 %0) {
; X64-LABEL: <icmp_ult_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ult i37 %0, 1
    ret void
}

define void @icmp_ule_i37_1(i37 %0) {
; X64-LABEL: <icmp_ule_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x1fffffffff
; X64-NEXT:    and rdi, rax
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setbe al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ubfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp ule i37 %0, 1
    ret void
}

define void @icmp_sgt_i37_1(i37 %0) {
; X64-LABEL: <icmp_sgt_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setg al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sgt i37 %0, 1
    ret void
}

define void @icmp_sge_i37_1(i37 %0) {
; X64-LABEL: <icmp_sge_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sge i37 %0, 1
    ret void
}

define void @icmp_slt_i37_1(i37 %0) {
; X64-LABEL: <icmp_slt_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp slt i37 %0, 1
    ret void
}

define i1 @icmp_slt_i37_largeimm(i37 %0) {
; X64-LABEL: <icmp_slt_i37_largeimm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    movabs rax, -0x111111111
; X64-NEXT:    cmp rdi, rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i37_largeimm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    mov x16, #0xeeef // =61167
; ARM64-NEXT:    movk x16, #0xeeee, lsl #16
; ARM64-NEXT:    movk x16, #0xfffe, lsl #32
; ARM64-NEXT:    movk x16, #0xffff, lsl #48
; ARM64-NEXT:    cmp x0, x16
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = icmp slt i37 %0, -4581298449
  ret i1 %r
}

define void @icmp_sle_i37_1(i37 %0) {
; X64-LABEL: <icmp_sle_i37_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setle al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i37_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp sle i37 %0, 1
    ret void
}


define void @icmp_eq_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: <icmp_eq_i64_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    cmp rdi, 0x2
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w1, eq
; ARM64-NEXT:    cmp x0, #0x2
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 %0, 1
    %2 = icmp eq i64 %0, 2
    ret void
}

define void @icmp_eq_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: <icmp_eq_i64_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w2, eq
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i64 %0, %1
    %3 = icmp eq i64 %0, %1
    ret void
}

define void @icmp_eq_i64_reorder_imm(i64 %0) {
; X64-LABEL: <icmp_eq_i64_reorder_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i64_reorder_imm>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, #0x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = icmp eq i64 1, %0
    ret void
}


define void @icmp_eq_i128_0(i128 %0) {
; X64-LABEL: <icmp_eq_i128_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov rdx, rdi
; X64-NEXT:    mov rbx, rsi
; X64-NEXT:    xor rdx, rax
; X64-NEXT:    xor rbx, rcx
; X64-NEXT:    or rdx, rbx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i128_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    ccmp x1, x3, #0x0, eq
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i128 %0, 0
    ret void
}

define void @icmp_eq_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_eq_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rbx, rsi
; X64-NEXT:    xor rax, rdx
; X64-NEXT:    xor rbx, rcx
; X64-NEXT:    or rax, rbx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sete al
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_eq_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    ccmp x1, x3, #0x0, eq
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp eq i128 %0, %1
    ret void
}

define void @icmp_ne_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_ne_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rbx, rsi
; X64-NEXT:    xor rax, rdx
; X64-NEXT:    xor rbx, rcx
; X64-NEXT:    or rax, rbx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setne al
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ne_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    ccmp x1, x3, #0x0, eq
; ARM64-NEXT:    cset w0, ne
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp ne i128 %0, %1
    ret void
}

define void @icmp_ugt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_ugt_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    cmp rdx, rdi
; X64-NEXT:    sbb rax, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ugt_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, hi
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp ugt i128 %0, %1
    ret void
}

define void @icmp_uge_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_uge_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    cmp rdi, rdx
; X64-NEXT:    sbb rax, rcx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_uge_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, hs
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp uge i128 %0, %1
    ret void
}

define void @icmp_ult_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_ult_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    cmp rdi, rdx
; X64-NEXT:    sbb rax, rcx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setb al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ult_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, lo
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp ult i128 %0, %1
    ret void
}

define void @icmp_ule_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_ule_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    cmp rdx, rdi
; X64-NEXT:    sbb rax, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setae al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ule_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, ls
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp ule i128 %0, %1
    ret void
}

define void @icmp_sgt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_sgt_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    cmp rdx, rdi
; X64-NEXT:    sbb rax, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sgt_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, gt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sgt i128 %0, %1
    ret void
}

define void @icmp_sge_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_sge_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    cmp rdi, rdx
; X64-NEXT:    sbb rax, rcx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sge_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, ge
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sge i128 %0, %1
    ret void
}

define void @icmp_slt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_slt_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    cmp rdi, rdx
; X64-NEXT:    sbb rax, rcx
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setl al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_slt_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp slt i128 %0, %1
    ret void
}

define void @icmp_sle_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: <icmp_sle_i128_i128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    cmp rdx, rdi
; X64-NEXT:    sbb rax, rsi
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    setge al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_sle_i128_i128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x2
; ARM64-NEXT:    sbcs xzr, x1, x3
; ARM64-NEXT:    cset w0, le
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = icmp sle i128 %0, %1
    ret void
}

