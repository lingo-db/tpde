From 616f2b685b06a13a2253c6aa9a59d3a9e6bb405b Mon Sep 17 00:00:00 2001
From: Alexis Engelke <engelke@in.tum.de>
Date: Wed, 15 Jan 2025 11:00:36 +0100
Subject: [PATCH] Add TPDE back-end

To compile, add the tpde2 repository to clang/lib/CodeGen/tpde2, e.g.
via a symlink. TPDE can be enabled using "-ftpde". By default, TPDE
failures cause a fallback to LLVM, this can be disabled with
"-ftpde-abort".
---
 clang/include/clang/Basic/CodeGenOptions.def  |  3 ++
 clang/include/clang/Driver/Options.td         | 12 +++++++
 clang/lib/CodeGen/BackendUtil.cpp             | 31 +++++++++++++++++++
 clang/lib/CodeGen/CMakeLists.txt              | 10 ++++++
 clang/lib/Driver/ToolChains/Clang.cpp         |  4 +++
 clang/lib/Driver/ToolChains/Flang.cpp         |  3 +-
 .../include/flang/Frontend/CodeGenOptions.def |  3 ++
 flang/lib/Frontend/CMakeLists.txt             |  2 ++
 flang/lib/Frontend/CompilerInvocation.cpp     |  9 ++++++
 flang/lib/Frontend/FrontendActions.cpp        | 31 +++++++++++++++++++
 10 files changed, 107 insertions(+), 1 deletion(-)

diff --git a/clang/include/clang/Basic/CodeGenOptions.def b/clang/include/clang/Basic/CodeGenOptions.def
index 259972bdf8f0..8e65b44b7452 100644
--- a/clang/include/clang/Basic/CodeGenOptions.def
+++ b/clang/include/clang/Basic/CodeGenOptions.def
@@ -465,6 +465,9 @@ ENUM_CODEGENOPT(ZeroCallUsedRegs, llvm::ZeroCallUsedRegs::ZeroCallUsedRegsKind,
 /// non-deleting destructors. (No effect on Microsoft ABI.)
 CODEGENOPT(CtorDtorReturnThis, 1, 0)
 
+CODEGENOPT(TPDEEnable, 1, 0) ///< Enable TPDE
+CODEGENOPT(TPDEAbort, 1, 0) ///< Error on TPDE abort instead of LLVM fallback
+
 /// FIXME: Make DebugOptions its own top-level .def file.
 #include "DebugOptions.def"
 
diff --git a/clang/include/clang/Driver/Options.td b/clang/include/clang/Driver/Options.td
--- a/clang/include/clang/Driver/Options.td
+++ b/clang/include/clang/Driver/Options.td
@@ -3621,6 +3621,18 @@ defm disable_block_signature_string : BoolFOption<"disable-block-signature-strin
   NegFlag<SetFalse, [], [ClangOption], "Don't disable">,
   BothFlags<[], [CC1Option], " block signature string)">>;
 
+
+defm tpde : BoolFOption<"tpde",
+  CodeGenOpts<"TPDEEnable">, DefaultFalse,
+  PosFlag<SetTrue, [], [ClangOption, CC1Option, FlangOption, FC1Option], "Enable">,
+  NegFlag<SetFalse, [], [ClangOption, CC1Option, FlangOption, FC1Option], "Disable">,
+  BothFlags<[], [ClangOption, CC1Option, FlangOption, FC1Option], " TPDE back-end">>;
+defm tpde_abort : BoolFOption<"tpde-abort",
+  CodeGenOpts<"TPDEAbort">, DefaultFalse,
+  PosFlag<SetTrue, [], [ClangOption, CC1Option, FlangOption, FC1Option], "Abort">,
+  NegFlag<SetFalse, [], [ClangOption, CC1Option, FlangOption, FC1Option], "Do not abort">,
+  BothFlags<[], [ClangOption, CC1Option, FlangOption, FC1Option], " on TPDE error">>;
+
 def fomit_frame_pointer : Flag<["-"], "fomit-frame-pointer">, Group<f_Group>,
   Visibility<[ClangOption, FlangOption]>,
   HelpText<"Omit the frame pointer from functions that don't need it. "
diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -9,6 +9,7 @@
 #include "clang/CodeGen/BackendUtil.h"
 #include "BackendConsumer.h"
 #include "LinkInModulesPass.h"
+#include "tpde-llvm/LLVMCompiler.hpp"
 #include "clang/Basic/CodeGenOptions.h"
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/LangOptions.h"
@@ -1184,6 +1185,35 @@ void EmitAssemblyHelper::RunOptimizationPipeline(
 void EmitAssemblyHelper::RunCodegenPipeline(
     BackendAction Action, std::unique_ptr<raw_pwrite_stream> &OS,
     std::unique_ptr<llvm::ToolOutputFile> &DwoOS) {
+  if (CodeGenOpts.TPDEEnable) {
+    if (Action != Backend_EmitObj) {
+      Diags.Report(
+          Diags.getCustomDiagID(DiagnosticsEngine::Error,
+                                "TPDE only supports emitting object files"));
+      return;
+    }
+
+    PrettyStackTraceString CrashInfo("TPDE");
+    llvm::TimeTraceScope TimeScope("TPDE");
+
+    auto Compiler = tpde_llvm::LLVMCompiler::create(TargetTriple);
+    std::vector<uint8_t> ObjectBuf;
+    if (Compiler && Compiler->compile_to_elf(*TheModule, ObjectBuf)) {
+      OS->write(reinterpret_cast<char *>(ObjectBuf.data()), ObjectBuf.size());
+      return;
+    }
+
+    if (CodeGenOpts.TPDEAbort) {
+      Diags.Report(Diags.getCustomDiagID(DiagnosticsEngine::Error,
+                                         "TPDE compilation failed"));
+      return;
+    }
+
+    Diags.Report(
+        Diags.getCustomDiagID(DiagnosticsEngine::Warning,
+                              "TPDE compilation failed, falling back to LLVM"));
+  }
+
   // We still use the legacy PM to run the codegen pipeline since the new PM
   // does not work with the codegen pipeline.
   // FIXME: make the new PM work with the codegen pipeline.
diff --git a/clang/lib/CodeGen/CMakeLists.txt b/clang/lib/CodeGen/CMakeLists.txt
index 868ec847b963..c3f8b295674b 100644
--- a/clang/lib/CodeGen/CMakeLists.txt
+++ b/clang/lib/CodeGen/CMakeLists.txt
@@ -159,3 +159,13 @@ add_clang_library(clangCodeGen
   clangLex
   clangSerialization
   )
+
+if (LLVM_LINK_LLVM_DYLIB)
+  set(TPDE_LINK_LLVM_STATIC OFF)
+else()
+  set(TPDE_LINK_LLVM_STATIC ON)
+endif()
+set(LLVM_FOUND TRUE)
+set(LIT ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py)
+add_subdirectory(tpde2)
+target_link_libraries(clangCodeGen PRIVATE $<BUILD_LOCAL_INTERFACE:tpde_llvm>)
diff --git a/clang/lib/Driver/ToolChains/Clang.cpp b/clang/lib/Driver/ToolChains/Clang.cpp
--- a/clang/lib/Driver/ToolChains/Clang.cpp
+++ b/clang/lib/Driver/ToolChains/Clang.cpp
@@ -8031,6 +8031,10 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
     }
   }
 
+  Args.AddLastArg(CmdArgs, options::OPT_ftpde, options::OPT_fno_tpde);
+  Args.AddLastArg(CmdArgs, options::OPT_ftpde_abort,
+                  options::OPT_fno_tpde_abort);
+
   if (Arg *A = Args.getLastArg(options::OPT_fglobal_isel,
                                options::OPT_fno_global_isel)) {
     CmdArgs.push_back("-mllvm");
diff --git a/clang/lib/Driver/ToolChains/Flang.cpp b/clang/lib/Driver/ToolChains/Flang.cpp
--- a/clang/lib/Driver/ToolChains/Flang.cpp
+++ b/clang/lib/Driver/ToolChains/Flang.cpp
@@ -159,7 +159,8 @@ void Flang::addCodegenOptions(const ArgList &Args,
                    options::OPT_finit_global_zero,
                    options::OPT_fno_init_global_zero, options::OPT_ftime_report,
                    options::OPT_ftime_report_EQ, options::OPT_funroll_loops,
-                   options::OPT_fno_unroll_loops});
+                   options::OPT_fno_unroll_loops,
+                   options::OPT_ftpde, options::OPT_ftpde_abort});
 }
 
 void Flang::addPicOptions(const ArgList &Args, ArgStringList &CmdArgs) const {
diff --git a/flang/include/flang/Frontend/CodeGenOptions.def b/flang/include/flang/Frontend/CodeGenOptions.def
--- a/flang/include/flang/Frontend/CodeGenOptions.def
+++ b/flang/include/flang/Frontend/CodeGenOptions.def
@@ -41,5 +41,8 @@ ENUM_CODEGENOPT(DebugInfo,  llvm::codegenoptions::DebugInfoKind, 4,  llvm::codeg
 ENUM_CODEGENOPT(VecLib, llvm::driver::VectorLibrary, 3, llvm::driver::VectorLibrary::NoLibrary) ///< Vector functions library to use
 ENUM_CODEGENOPT(FramePointer, llvm::FramePointerKind, 2, llvm::FramePointerKind::None) ///< Enable the usage of frame pointers
 
+CODEGENOPT(TPDEEnable, 1, 0)
+CODEGENOPT(TPDEAbort, 1, 0)
+
 #undef CODEGENOPT
 #undef ENUM_CODEGENOPT
diff --git a/flang/lib/Frontend/CMakeLists.txt b/flang/lib/Frontend/CMakeLists.txt
--- a/flang/lib/Frontend/CMakeLists.txt
+++ b/flang/lib/Frontend/CMakeLists.txt
@@ -67,5 +67,7 @@ add_flang_library(flangFrontend
 
   CLANG_LIBS
   clangBasic
+  clangCodeGen
   clangDriver
 )
+target_link_libraries(flangFrontend PRIVATE $<BUILD_LOCAL_INTERFACE:tpde_llvm>)
diff --git a/flang/lib/Frontend/CompilerInvocation.cpp b/flang/lib/Frontend/CompilerInvocation.cpp
--- a/flang/lib/Frontend/CompilerInvocation.cpp
+++ b/flang/lib/Frontend/CompilerInvocation.cpp
@@ -426,6 +426,15 @@ static void parseCodeGenArgs(Fortran::frontend::CodeGenOptions &opts,
                    clang::driver::options::OPT_funderscoring, false)) {
     opts.Underscoring = 0;
   }
+
+  if (args.hasFlag(clang::driver::options::OPT_ftpde,
+                   clang::driver::options::OPT_fno_tpde, false)) {
+    opts.TPDEEnable = 1;
+    if (args.hasFlag(clang::driver::options::OPT_ftpde_abort,
+                     clang::driver::options::OPT_fno_tpde_abort, false)) {
+      opts.TPDEAbort = 1;
+    }
+  }
 }
 
 /// Parses all target input arguments and populates the target
diff --git a/flang/lib/Frontend/FrontendActions.cpp b/flang/lib/Frontend/FrontendActions.cpp
--- a/flang/lib/Frontend/FrontendActions.cpp
+++ b/flang/lib/Frontend/FrontendActions.cpp
@@ -42,6 +42,7 @@
 #include "mlir/Support/LLVM.h"
 #include "mlir/Target/LLVMIR/Import.h"
 #include "mlir/Target/LLVMIR/ModuleTranslation.h"
+#include "tpde-llvm/LLVMCompiler.hpp"
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/DiagnosticFrontend.h"
 #include "clang/Basic/FileManager.h"
@@ -976,6 +977,35 @@ static void generateMachineCodeOrAssemblyImpl(clang::DiagnosticsEngine &diags,
           (act == BackendActionTy::Backend_EmitAssembly)) &&
          "Unsupported action");
 
+  if (codeGenOpts.TPDEEnable) {
+    if (act != BackendActionTy::Backend_EmitObj) {
+      diags.Report(
+          diags.getCustomDiagID(clang::DiagnosticsEngine::Error,
+                                "TPDE only supports emitting object files"));
+      return;
+    }
+
+    llvm::TimeTraceScope timeScope("TPDE");
+
+    llvm::Triple triple(llvmModule.getTargetTriple());
+    auto compiler = tpde_llvm::LLVMCompiler::create(triple);
+    std::vector<uint8_t> objectBuf;
+    if (compiler && compiler->compile_to_elf(llvmModule, objectBuf)) {
+      os.write(reinterpret_cast<char *>(objectBuf.data()), objectBuf.size());
+      return;
+    }
+
+    if (codeGenOpts.TPDEAbort) {
+      diags.Report(diags.getCustomDiagID(clang::DiagnosticsEngine::Error,
+                                         "TPDE compilation failed"));
+      return;
+    }
+
+    diags.Report(
+        diags.getCustomDiagID(clang::DiagnosticsEngine::Warning,
+                              "TPDE compilation failed, falling back to LLVM"));
+  }
+
   // Set-up the pass manager, i.e create an LLVM code-gen pass pipeline.
   // Currently only the legacy pass manager is supported.
   // TODO: Switch to the new PM once it's available in the backend.
-- 
2.49.0
